
Keypad.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000013d0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08001580  08001580  00011580  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080015f4  080015f4  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  080015f4  080015f4  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080015f4  080015f4  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080015f4  080015f4  000115f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080015f8  080015f8  000115f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080015fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002005c  2**0
                  CONTENTS
 10 .bss          0000016c  2000005c  2000005c  0002005c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001c8  200001c8  0002005c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 14 .debug_info   000009b6  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00000358  00000000  00000000  00020a85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000120  00000000  00000000  00020de0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000000c5  00000000  00000000  00020f00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00002c9b  00000000  00000000  00020fc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000155e  00000000  00000000  00023c60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000097f6  00000000  00000000  000251be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00000b2c  00000000  00000000  0002e9b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005b  00000000  00000000  0002f4e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000005c 	.word	0x2000005c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08001568 	.word	0x08001568

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000060 	.word	0x20000060
 80001ec:	08001568 	.word	0x08001568

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <delay>:
 */

#include <stdint.h>
#include <stdio.h>

void delay(void){
 8000290:	b480      	push	{r7}
 8000292:	b083      	sub	sp, #12
 8000294:	af00      	add	r7, sp, #0
	for(uint32_t i=0 ; i<=300000 ; i++);
 8000296:	2300      	movs	r3, #0
 8000298:	607b      	str	r3, [r7, #4]
 800029a:	e002      	b.n	80002a2 <delay+0x12>
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	3301      	adds	r3, #1
 80002a0:	607b      	str	r3, [r7, #4]
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	4a04      	ldr	r2, [pc, #16]	; (80002b8 <delay+0x28>)
 80002a6:	4293      	cmp	r3, r2
 80002a8:	d9f8      	bls.n	800029c <delay+0xc>
}
 80002aa:	bf00      	nop
 80002ac:	bf00      	nop
 80002ae:	370c      	adds	r7, #12
 80002b0:	46bd      	mov	sp, r7
 80002b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b6:	4770      	bx	lr
 80002b8:	000493e0 	.word	0x000493e0

080002bc <main>:

int main(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b086      	sub	sp, #24
 80002c0:	af00      	add	r7, sp, #0
    // Peripheral Registers Addresses
    uint32_t volatile *const pGPIOModeReg   = (uint32_t*)(0x40020C00);
 80002c2:	4b87      	ldr	r3, [pc, #540]	; (80004e0 <main+0x224>)
 80002c4:	617b      	str	r3, [r7, #20]
    uint32_t volatile *const pOutputDataReg = (uint32_t*)(0x40020C00 + 0x10);
 80002c6:	4b87      	ldr	r3, [pc, #540]	; (80004e4 <main+0x228>)
 80002c8:	613b      	str	r3, [r7, #16]
    uint32_t volatile *const pInputDataReg  = (uint32_t*)(0x40020C00 + 0x14);
 80002ca:	4b87      	ldr	r3, [pc, #540]	; (80004e8 <main+0x22c>)
 80002cc:	60fb      	str	r3, [r7, #12]
    uint32_t volatile *const pClkCtrlReg    = (uint32_t*)(0x40023800 + 0x30);
 80002ce:	4b87      	ldr	r3, [pc, #540]	; (80004ec <main+0x230>)
 80002d0:	60bb      	str	r3, [r7, #8]
    uint32_t volatile *const pPullupDownReg = (uint32_t*)(0x40020C00 + 0x0C);
 80002d2:	4b87      	ldr	r3, [pc, #540]	; (80004f0 <main+0x234>)
 80002d4:	607b      	str	r3, [r7, #4]

    // Step 1: Enabling the Peripheral GPIO Clock
    *pClkCtrlReg |= (1 << 3);
 80002d6:	68bb      	ldr	r3, [r7, #8]
 80002d8:	681b      	ldr	r3, [r3, #0]
 80002da:	f043 0208 	orr.w	r2, r3, #8
 80002de:	68bb      	ldr	r3, [r7, #8]
 80002e0:	601a      	str	r2, [r3, #0]

    // Step 2: Configuring PD0, PD1, PD2, PD3 as output (rows)
    *pGPIOModeReg &= ~(0xFF); // Clearing of Bits
 80002e2:	697b      	ldr	r3, [r7, #20]
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80002ea:	697b      	ldr	r3, [r7, #20]
 80002ec:	601a      	str	r2, [r3, #0]
    *pGPIOModeReg |= 0x55;    // Setting of pins
 80002ee:	697b      	ldr	r3, [r7, #20]
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	f043 0255 	orr.w	r2, r3, #85	; 0x55
 80002f6:	697b      	ldr	r3, [r7, #20]
 80002f8:	601a      	str	r2, [r3, #0]

    // Step 3: Configuring PD8, PD9, PD10, PD11 as Input (Column)
    *pGPIOModeReg &= ~(0xFF << 16);
 80002fa:	697b      	ldr	r3, [r7, #20]
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 8000302:	697b      	ldr	r3, [r7, #20]
 8000304:	601a      	str	r2, [r3, #0]

    // Step 4: Enabling Pull-up Registers for PD8, PD9, PD10, PD11 as Input (Column)
    *pPullupDownReg &= ~(0xFF << 16);
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	601a      	str	r2, [r3, #0]
    *pPullupDownReg |= (0x55 << 16);
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	f443 02aa 	orr.w	r2, r3, #5570560	; 0x550000
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	601a      	str	r2, [r3, #0]

    while (1){
    	//Step 5: Make all rows as High of
		*pOutputDataReg |= 0x0F;
 800031e:	693b      	ldr	r3, [r7, #16]
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	f043 020f 	orr.w	r2, r3, #15
 8000326:	693b      	ldr	r3, [r7, #16]
 8000328:	601a      	str	r2, [r3, #0]
		*pOutputDataReg &= ~(1 << 0);			    //Make R1 Low PD0
 800032a:	693b      	ldr	r3, [r7, #16]
 800032c:	681b      	ldr	r3, [r3, #0]
 800032e:	f023 0201 	bic.w	r2, r3, #1
 8000332:	693b      	ldr	r3, [r7, #16]
 8000334:	601a      	str	r2, [r3, #0]

		//Check C1(PD8) low or high
		if(!(*pInputDataReg & (1 << 8))){
 8000336:	68fb      	ldr	r3, [r7, #12]
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800033e:	2b00      	cmp	r3, #0
 8000340:	d102      	bne.n	8000348 <main+0x8c>
			//Key is Pressed
			printf("1/n");
 8000342:	486c      	ldr	r0, [pc, #432]	; (80004f4 <main+0x238>)
 8000344:	f000 fa9c 	bl	8000880 <iprintf>
		}
		delay();
 8000348:	f7ff ffa2 	bl	8000290 <delay>
		//Check C2(PD9) low or high
		if(!(*pInputDataReg & (1 << 9))){
 800034c:	68fb      	ldr	r3, [r7, #12]
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000354:	2b00      	cmp	r3, #0
 8000356:	d102      	bne.n	800035e <main+0xa2>
			//Key is Pressed
			printf("2/n");
 8000358:	4867      	ldr	r0, [pc, #412]	; (80004f8 <main+0x23c>)
 800035a:	f000 fa91 	bl	8000880 <iprintf>
		}
		delay();
 800035e:	f7ff ff97 	bl	8000290 <delay>
		//Check C3(PD10) low or high
		if(!(*pInputDataReg & (1 << 10))){
 8000362:	68fb      	ldr	r3, [r7, #12]
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800036a:	2b00      	cmp	r3, #0
 800036c:	d102      	bne.n	8000374 <main+0xb8>
			//Key is Pressed
			printf("3/n");
 800036e:	4863      	ldr	r0, [pc, #396]	; (80004fc <main+0x240>)
 8000370:	f000 fa86 	bl	8000880 <iprintf>
		 }
		delay();
 8000374:	f7ff ff8c 	bl	8000290 <delay>
		//Check C4(PD11) low or high

		if(!(*pInputDataReg & (1 << 11))){
 8000378:	68fb      	ldr	r3, [r7, #12]
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000380:	2b00      	cmp	r3, #0
 8000382:	d102      	bne.n	800038a <main+0xce>
			//Key is Pressed
			printf("A/n");
 8000384:	485e      	ldr	r0, [pc, #376]	; (8000500 <main+0x244>)
 8000386:	f000 fa7b 	bl	8000880 <iprintf>
		}
		delay();
 800038a:	f7ff ff81 	bl	8000290 <delay>
		//Make All rows as High
		*pOutputDataReg |= 0x0f;
 800038e:	693b      	ldr	r3, [r7, #16]
 8000390:	681b      	ldr	r3, [r3, #0]
 8000392:	f043 020f 	orr.w	r2, r3, #15
 8000396:	693b      	ldr	r3, [r7, #16]
 8000398:	601a      	str	r2, [r3, #0]
		*pOutputDataReg &= ~(1 << 1); 			//Make R2 Low PD1
 800039a:	693b      	ldr	r3, [r7, #16]
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	f023 0202 	bic.w	r2, r3, #2
 80003a2:	693b      	ldr	r3, [r7, #16]
 80003a4:	601a      	str	r2, [r3, #0]

		//Check C1(PD8) low or high
		if(!(*pInputDataReg & (1 << 8))){
 80003a6:	68fb      	ldr	r3, [r7, #12]
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d102      	bne.n	80003b8 <main+0xfc>
			//Key is Pressed
			printf("4/n");
 80003b2:	4854      	ldr	r0, [pc, #336]	; (8000504 <main+0x248>)
 80003b4:	f000 fa64 	bl	8000880 <iprintf>
		}
		delay();
 80003b8:	f7ff ff6a 	bl	8000290 <delay>
		//Check C2(PD9) low or high
		if(!(*pInputDataReg & (1 << 9))){
 80003bc:	68fb      	ldr	r3, [r7, #12]
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d102      	bne.n	80003ce <main+0x112>
			//Key is Pressed
			printf("5/n");
 80003c8:	484f      	ldr	r0, [pc, #316]	; (8000508 <main+0x24c>)
 80003ca:	f000 fa59 	bl	8000880 <iprintf>
		}
		delay();
 80003ce:	f7ff ff5f 	bl	8000290 <delay>
		//Check C3(PD10) low or high
		if(!(*pInputDataReg & (1 << 10))){
 80003d2:	68fb      	ldr	r3, [r7, #12]
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d102      	bne.n	80003e4 <main+0x128>
		 //Key is Pressed
			printf("6/n");
 80003de:	484b      	ldr	r0, [pc, #300]	; (800050c <main+0x250>)
 80003e0:	f000 fa4e 	bl	8000880 <iprintf>
		 }
		 delay();
 80003e4:	f7ff ff54 	bl	8000290 <delay>
		 //Check C4(PD11) low or high

		 if(!(*pInputDataReg & (1 << 11))){
 80003e8:	68fb      	ldr	r3, [r7, #12]
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d102      	bne.n	80003fa <main+0x13e>
		   //Key is Pressed
			 printf("B/n");
 80003f4:	4846      	ldr	r0, [pc, #280]	; (8000510 <main+0x254>)
 80003f6:	f000 fa43 	bl	8000880 <iprintf>
		 }
		 delay();
 80003fa:	f7ff ff49 	bl	8000290 <delay>
		 //Make All rows as High
		*pOutputDataReg |= 0x0f;
 80003fe:	693b      	ldr	r3, [r7, #16]
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	f043 020f 	orr.w	r2, r3, #15
 8000406:	693b      	ldr	r3, [r7, #16]
 8000408:	601a      	str	r2, [r3, #0]
		*pOutputDataReg &= ~(1 << 2);			//Make R3 Low PD2
 800040a:	693b      	ldr	r3, [r7, #16]
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	f023 0204 	bic.w	r2, r3, #4
 8000412:	693b      	ldr	r3, [r7, #16]
 8000414:	601a      	str	r2, [r3, #0]

		//Check C1(PD8) low or high
		if(!(*pInputDataReg & (1 << 8))){
 8000416:	68fb      	ldr	r3, [r7, #12]
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800041e:	2b00      	cmp	r3, #0
 8000420:	d102      	bne.n	8000428 <main+0x16c>
			//Key is Pressed
			printf("7/n");
 8000422:	483c      	ldr	r0, [pc, #240]	; (8000514 <main+0x258>)
 8000424:	f000 fa2c 	bl	8000880 <iprintf>
		}
		delay();
 8000428:	f7ff ff32 	bl	8000290 <delay>
		//Check C2(PD9) low or high
		if(!(*pInputDataReg & (1 << 9))){
 800042c:	68fb      	ldr	r3, [r7, #12]
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000434:	2b00      	cmp	r3, #0
 8000436:	d102      	bne.n	800043e <main+0x182>
			//Key is Pressed
			printf("8/n");
 8000438:	4837      	ldr	r0, [pc, #220]	; (8000518 <main+0x25c>)
 800043a:	f000 fa21 	bl	8000880 <iprintf>
		}
		delay();
 800043e:	f7ff ff27 	bl	8000290 <delay>
		//Check C3(PD10) low or high
		if(!(*pInputDataReg & (1 << 10))){
 8000442:	68fb      	ldr	r3, [r7, #12]
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800044a:	2b00      	cmp	r3, #0
 800044c:	d102      	bne.n	8000454 <main+0x198>
		 //Key is Pressed
			printf("9/n");
 800044e:	4833      	ldr	r0, [pc, #204]	; (800051c <main+0x260>)
 8000450:	f000 fa16 	bl	8000880 <iprintf>
		 }
		 delay();
 8000454:	f7ff ff1c 	bl	8000290 <delay>
		 //Check C4(PD11) low or high

		 if(!(*pInputDataReg & (1 << 11))){
 8000458:	68fb      	ldr	r3, [r7, #12]
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000460:	2b00      	cmp	r3, #0
 8000462:	d102      	bne.n	800046a <main+0x1ae>
		   //Key is Pressed
			 printf("C/n");
 8000464:	482e      	ldr	r0, [pc, #184]	; (8000520 <main+0x264>)
 8000466:	f000 fa0b 	bl	8000880 <iprintf>
		 }
		 delay();
 800046a:	f7ff ff11 	bl	8000290 <delay>
		 //Make All rows as High
		*pOutputDataReg |= 0x0f;
 800046e:	693b      	ldr	r3, [r7, #16]
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	f043 020f 	orr.w	r2, r3, #15
 8000476:	693b      	ldr	r3, [r7, #16]
 8000478:	601a      	str	r2, [r3, #0]
		*pOutputDataReg &= ~(1 << 3);			//Make R4 Low PD3
 800047a:	693b      	ldr	r3, [r7, #16]
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	f023 0208 	bic.w	r2, r3, #8
 8000482:	693b      	ldr	r3, [r7, #16]
 8000484:	601a      	str	r2, [r3, #0]

		//Check C1(PD8) low or high
		if(!(*pInputDataReg & (1 << 8))){
 8000486:	68fb      	ldr	r3, [r7, #12]
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800048e:	2b00      	cmp	r3, #0
 8000490:	d102      	bne.n	8000498 <main+0x1dc>
			//Key is Pressed
			printf("*/n");
 8000492:	4824      	ldr	r0, [pc, #144]	; (8000524 <main+0x268>)
 8000494:	f000 f9f4 	bl	8000880 <iprintf>
		}
		delay();
 8000498:	f7ff fefa 	bl	8000290 <delay>
		//Check C2(PD9) low or high
		if(!(*pInputDataReg & (1 << 9))){
 800049c:	68fb      	ldr	r3, [r7, #12]
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d102      	bne.n	80004ae <main+0x1f2>
			//Key is Pressed
			printf("0/n");
 80004a8:	481f      	ldr	r0, [pc, #124]	; (8000528 <main+0x26c>)
 80004aa:	f000 f9e9 	bl	8000880 <iprintf>
		}
		delay();
 80004ae:	f7ff feef 	bl	8000290 <delay>
		//Check C3(PD10) low or high
		if(!(*pInputDataReg & (1 << 10))){
 80004b2:	68fb      	ldr	r3, [r7, #12]
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d102      	bne.n	80004c4 <main+0x208>
		 //Key is Pressed
			printf("#/n");
 80004be:	481b      	ldr	r0, [pc, #108]	; (800052c <main+0x270>)
 80004c0:	f000 f9de 	bl	8000880 <iprintf>
		 }
		 delay();
 80004c4:	f7ff fee4 	bl	8000290 <delay>
		 //Check C4(PD11) low or high

		 if(!(*pInputDataReg & (1 << 11))){
 80004c8:	68fb      	ldr	r3, [r7, #12]
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d102      	bne.n	80004da <main+0x21e>
		   //Key is Pressed
			 printf("D/n");
 80004d4:	4816      	ldr	r0, [pc, #88]	; (8000530 <main+0x274>)
 80004d6:	f000 f9d3 	bl	8000880 <iprintf>
		 }
		 delay();
 80004da:	f7ff fed9 	bl	8000290 <delay>
		*pOutputDataReg |= 0x0F;
 80004de:	e71e      	b.n	800031e <main+0x62>
 80004e0:	40020c00 	.word	0x40020c00
 80004e4:	40020c10 	.word	0x40020c10
 80004e8:	40020c14 	.word	0x40020c14
 80004ec:	40023830 	.word	0x40023830
 80004f0:	40020c0c 	.word	0x40020c0c
 80004f4:	08001580 	.word	0x08001580
 80004f8:	08001584 	.word	0x08001584
 80004fc:	08001588 	.word	0x08001588
 8000500:	0800158c 	.word	0x0800158c
 8000504:	08001590 	.word	0x08001590
 8000508:	08001594 	.word	0x08001594
 800050c:	08001598 	.word	0x08001598
 8000510:	0800159c 	.word	0x0800159c
 8000514:	080015a0 	.word	0x080015a0
 8000518:	080015a4 	.word	0x080015a4
 800051c:	080015a8 	.word	0x080015a8
 8000520:	080015ac 	.word	0x080015ac
 8000524:	080015b0 	.word	0x080015b0
 8000528:	080015b4 	.word	0x080015b4
 800052c:	080015b8 	.word	0x080015b8
 8000530:	080015bc 	.word	0x080015bc

08000534 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000534:	b480      	push	{r7}
 8000536:	b083      	sub	sp, #12
 8000538:	af00      	add	r7, sp, #0
 800053a:	4603      	mov	r3, r0
 800053c:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 800053e:	4b0f      	ldr	r3, [pc, #60]	; (800057c <ITM_SendChar+0x48>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	4a0e      	ldr	r2, [pc, #56]	; (800057c <ITM_SendChar+0x48>)
 8000544:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000548:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 800054a:	4b0d      	ldr	r3, [pc, #52]	; (8000580 <ITM_SendChar+0x4c>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	4a0c      	ldr	r2, [pc, #48]	; (8000580 <ITM_SendChar+0x4c>)
 8000550:	f043 0301 	orr.w	r3, r3, #1
 8000554:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000556:	bf00      	nop
 8000558:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	f003 0301 	and.w	r3, r3, #1
 8000562:	2b00      	cmp	r3, #0
 8000564:	d0f8      	beq.n	8000558 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000566:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800056a:	79fb      	ldrb	r3, [r7, #7]
 800056c:	6013      	str	r3, [r2, #0]
}
 800056e:	bf00      	nop
 8000570:	370c      	adds	r7, #12
 8000572:	46bd      	mov	sp, r7
 8000574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop
 800057c:	e000edfc 	.word	0xe000edfc
 8000580:	e0000e00 	.word	0xe0000e00

08000584 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b086      	sub	sp, #24
 8000588:	af00      	add	r7, sp, #0
 800058a:	60f8      	str	r0, [r7, #12]
 800058c:	60b9      	str	r1, [r7, #8]
 800058e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000590:	2300      	movs	r3, #0
 8000592:	617b      	str	r3, [r7, #20]
 8000594:	e00a      	b.n	80005ac <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000596:	f3af 8000 	nop.w
 800059a:	4601      	mov	r1, r0
 800059c:	68bb      	ldr	r3, [r7, #8]
 800059e:	1c5a      	adds	r2, r3, #1
 80005a0:	60ba      	str	r2, [r7, #8]
 80005a2:	b2ca      	uxtb	r2, r1
 80005a4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005a6:	697b      	ldr	r3, [r7, #20]
 80005a8:	3301      	adds	r3, #1
 80005aa:	617b      	str	r3, [r7, #20]
 80005ac:	697a      	ldr	r2, [r7, #20]
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	429a      	cmp	r2, r3
 80005b2:	dbf0      	blt.n	8000596 <_read+0x12>
	}

return len;
 80005b4:	687b      	ldr	r3, [r7, #4]
}
 80005b6:	4618      	mov	r0, r3
 80005b8:	3718      	adds	r7, #24
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}

080005be <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80005be:	b580      	push	{r7, lr}
 80005c0:	b086      	sub	sp, #24
 80005c2:	af00      	add	r7, sp, #0
 80005c4:	60f8      	str	r0, [r7, #12]
 80005c6:	60b9      	str	r1, [r7, #8]
 80005c8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005ca:	2300      	movs	r3, #0
 80005cc:	617b      	str	r3, [r7, #20]
 80005ce:	e009      	b.n	80005e4 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 80005d0:	68bb      	ldr	r3, [r7, #8]
 80005d2:	1c5a      	adds	r2, r3, #1
 80005d4:	60ba      	str	r2, [r7, #8]
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	4618      	mov	r0, r3
 80005da:	f7ff ffab 	bl	8000534 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005de:	697b      	ldr	r3, [r7, #20]
 80005e0:	3301      	adds	r3, #1
 80005e2:	617b      	str	r3, [r7, #20]
 80005e4:	697a      	ldr	r2, [r7, #20]
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	429a      	cmp	r2, r3
 80005ea:	dbf1      	blt.n	80005d0 <_write+0x12>
	}
	return len;
 80005ec:	687b      	ldr	r3, [r7, #4]
}
 80005ee:	4618      	mov	r0, r3
 80005f0:	3718      	adds	r7, #24
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}

080005f6 <_close>:

int _close(int file)
{
 80005f6:	b480      	push	{r7}
 80005f8:	b083      	sub	sp, #12
 80005fa:	af00      	add	r7, sp, #0
 80005fc:	6078      	str	r0, [r7, #4]
	return -1;
 80005fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000602:	4618      	mov	r0, r3
 8000604:	370c      	adds	r7, #12
 8000606:	46bd      	mov	sp, r7
 8000608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060c:	4770      	bx	lr

0800060e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800060e:	b480      	push	{r7}
 8000610:	b083      	sub	sp, #12
 8000612:	af00      	add	r7, sp, #0
 8000614:	6078      	str	r0, [r7, #4]
 8000616:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000618:	683b      	ldr	r3, [r7, #0]
 800061a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800061e:	605a      	str	r2, [r3, #4]
	return 0;
 8000620:	2300      	movs	r3, #0
}
 8000622:	4618      	mov	r0, r3
 8000624:	370c      	adds	r7, #12
 8000626:	46bd      	mov	sp, r7
 8000628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062c:	4770      	bx	lr

0800062e <_isatty>:

int _isatty(int file)
{
 800062e:	b480      	push	{r7}
 8000630:	b083      	sub	sp, #12
 8000632:	af00      	add	r7, sp, #0
 8000634:	6078      	str	r0, [r7, #4]
	return 1;
 8000636:	2301      	movs	r3, #1
}
 8000638:	4618      	mov	r0, r3
 800063a:	370c      	adds	r7, #12
 800063c:	46bd      	mov	sp, r7
 800063e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000642:	4770      	bx	lr

08000644 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000644:	b480      	push	{r7}
 8000646:	b085      	sub	sp, #20
 8000648:	af00      	add	r7, sp, #0
 800064a:	60f8      	str	r0, [r7, #12]
 800064c:	60b9      	str	r1, [r7, #8]
 800064e:	607a      	str	r2, [r7, #4]
	return 0;
 8000650:	2300      	movs	r3, #0
}
 8000652:	4618      	mov	r0, r3
 8000654:	3714      	adds	r7, #20
 8000656:	46bd      	mov	sp, r7
 8000658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065c:	4770      	bx	lr
	...

08000660 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b086      	sub	sp, #24
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000668:	4a14      	ldr	r2, [pc, #80]	; (80006bc <_sbrk+0x5c>)
 800066a:	4b15      	ldr	r3, [pc, #84]	; (80006c0 <_sbrk+0x60>)
 800066c:	1ad3      	subs	r3, r2, r3
 800066e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000670:	697b      	ldr	r3, [r7, #20]
 8000672:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000674:	4b13      	ldr	r3, [pc, #76]	; (80006c4 <_sbrk+0x64>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	2b00      	cmp	r3, #0
 800067a:	d102      	bne.n	8000682 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800067c:	4b11      	ldr	r3, [pc, #68]	; (80006c4 <_sbrk+0x64>)
 800067e:	4a12      	ldr	r2, [pc, #72]	; (80006c8 <_sbrk+0x68>)
 8000680:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000682:	4b10      	ldr	r3, [pc, #64]	; (80006c4 <_sbrk+0x64>)
 8000684:	681a      	ldr	r2, [r3, #0]
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	4413      	add	r3, r2
 800068a:	693a      	ldr	r2, [r7, #16]
 800068c:	429a      	cmp	r2, r3
 800068e:	d207      	bcs.n	80006a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000690:	f000 f99a 	bl	80009c8 <__errno>
 8000694:	4603      	mov	r3, r0
 8000696:	220c      	movs	r2, #12
 8000698:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800069a:	f04f 33ff 	mov.w	r3, #4294967295
 800069e:	e009      	b.n	80006b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80006a0:	4b08      	ldr	r3, [pc, #32]	; (80006c4 <_sbrk+0x64>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80006a6:	4b07      	ldr	r3, [pc, #28]	; (80006c4 <_sbrk+0x64>)
 80006a8:	681a      	ldr	r2, [r3, #0]
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	4413      	add	r3, r2
 80006ae:	4a05      	ldr	r2, [pc, #20]	; (80006c4 <_sbrk+0x64>)
 80006b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80006b2:	68fb      	ldr	r3, [r7, #12]
}
 80006b4:	4618      	mov	r0, r3
 80006b6:	3718      	adds	r7, #24
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	20020000 	.word	0x20020000
 80006c0:	00000400 	.word	0x00000400
 80006c4:	20000078 	.word	0x20000078
 80006c8:	200001c8 	.word	0x200001c8

080006cc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006cc:	480d      	ldr	r0, [pc, #52]	; (8000704 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006ce:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80006d0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006d4:	480c      	ldr	r0, [pc, #48]	; (8000708 <LoopForever+0x6>)
  ldr r1, =_edata
 80006d6:	490d      	ldr	r1, [pc, #52]	; (800070c <LoopForever+0xa>)
  ldr r2, =_sidata
 80006d8:	4a0d      	ldr	r2, [pc, #52]	; (8000710 <LoopForever+0xe>)
  movs r3, #0
 80006da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006dc:	e002      	b.n	80006e4 <LoopCopyDataInit>

080006de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006e2:	3304      	adds	r3, #4

080006e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006e8:	d3f9      	bcc.n	80006de <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006ea:	4a0a      	ldr	r2, [pc, #40]	; (8000714 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006ec:	4c0a      	ldr	r4, [pc, #40]	; (8000718 <LoopForever+0x16>)
  movs r3, #0
 80006ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006f0:	e001      	b.n	80006f6 <LoopFillZerobss>

080006f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006f4:	3204      	adds	r2, #4

080006f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006f8:	d3fb      	bcc.n	80006f2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80006fa:	f000 f96b 	bl	80009d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006fe:	f7ff fddd 	bl	80002bc <main>

08000702 <LoopForever>:

LoopForever:
  b LoopForever
 8000702:	e7fe      	b.n	8000702 <LoopForever>
  ldr   r0, =_estack
 8000704:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000708:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800070c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000710:	080015fc 	.word	0x080015fc
  ldr r2, =_sbss
 8000714:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000718:	200001c8 	.word	0x200001c8

0800071c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800071c:	e7fe      	b.n	800071c <ADC_IRQHandler>
	...

08000720 <std>:
 8000720:	2300      	movs	r3, #0
 8000722:	b510      	push	{r4, lr}
 8000724:	4604      	mov	r4, r0
 8000726:	e9c0 3300 	strd	r3, r3, [r0]
 800072a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800072e:	6083      	str	r3, [r0, #8]
 8000730:	8181      	strh	r1, [r0, #12]
 8000732:	6643      	str	r3, [r0, #100]	; 0x64
 8000734:	81c2      	strh	r2, [r0, #14]
 8000736:	6183      	str	r3, [r0, #24]
 8000738:	4619      	mov	r1, r3
 800073a:	2208      	movs	r2, #8
 800073c:	305c      	adds	r0, #92	; 0x5c
 800073e:	f000 f8f4 	bl	800092a <memset>
 8000742:	4b05      	ldr	r3, [pc, #20]	; (8000758 <std+0x38>)
 8000744:	6263      	str	r3, [r4, #36]	; 0x24
 8000746:	4b05      	ldr	r3, [pc, #20]	; (800075c <std+0x3c>)
 8000748:	62a3      	str	r3, [r4, #40]	; 0x28
 800074a:	4b05      	ldr	r3, [pc, #20]	; (8000760 <std+0x40>)
 800074c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800074e:	4b05      	ldr	r3, [pc, #20]	; (8000764 <std+0x44>)
 8000750:	6224      	str	r4, [r4, #32]
 8000752:	6323      	str	r3, [r4, #48]	; 0x30
 8000754:	bd10      	pop	{r4, pc}
 8000756:	bf00      	nop
 8000758:	080008a5 	.word	0x080008a5
 800075c:	080008c7 	.word	0x080008c7
 8000760:	080008ff 	.word	0x080008ff
 8000764:	08000923 	.word	0x08000923

08000768 <stdio_exit_handler>:
 8000768:	4a02      	ldr	r2, [pc, #8]	; (8000774 <stdio_exit_handler+0xc>)
 800076a:	4903      	ldr	r1, [pc, #12]	; (8000778 <stdio_exit_handler+0x10>)
 800076c:	4803      	ldr	r0, [pc, #12]	; (800077c <stdio_exit_handler+0x14>)
 800076e:	f000 b869 	b.w	8000844 <_fwalk_sglue>
 8000772:	bf00      	nop
 8000774:	20000000 	.word	0x20000000
 8000778:	080012c5 	.word	0x080012c5
 800077c:	2000000c 	.word	0x2000000c

08000780 <cleanup_stdio>:
 8000780:	6841      	ldr	r1, [r0, #4]
 8000782:	4b0c      	ldr	r3, [pc, #48]	; (80007b4 <cleanup_stdio+0x34>)
 8000784:	4299      	cmp	r1, r3
 8000786:	b510      	push	{r4, lr}
 8000788:	4604      	mov	r4, r0
 800078a:	d001      	beq.n	8000790 <cleanup_stdio+0x10>
 800078c:	f000 fd9a 	bl	80012c4 <_fflush_r>
 8000790:	68a1      	ldr	r1, [r4, #8]
 8000792:	4b09      	ldr	r3, [pc, #36]	; (80007b8 <cleanup_stdio+0x38>)
 8000794:	4299      	cmp	r1, r3
 8000796:	d002      	beq.n	800079e <cleanup_stdio+0x1e>
 8000798:	4620      	mov	r0, r4
 800079a:	f000 fd93 	bl	80012c4 <_fflush_r>
 800079e:	68e1      	ldr	r1, [r4, #12]
 80007a0:	4b06      	ldr	r3, [pc, #24]	; (80007bc <cleanup_stdio+0x3c>)
 80007a2:	4299      	cmp	r1, r3
 80007a4:	d004      	beq.n	80007b0 <cleanup_stdio+0x30>
 80007a6:	4620      	mov	r0, r4
 80007a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80007ac:	f000 bd8a 	b.w	80012c4 <_fflush_r>
 80007b0:	bd10      	pop	{r4, pc}
 80007b2:	bf00      	nop
 80007b4:	2000007c 	.word	0x2000007c
 80007b8:	200000e4 	.word	0x200000e4
 80007bc:	2000014c 	.word	0x2000014c

080007c0 <global_stdio_init.part.0>:
 80007c0:	b510      	push	{r4, lr}
 80007c2:	4b0b      	ldr	r3, [pc, #44]	; (80007f0 <global_stdio_init.part.0+0x30>)
 80007c4:	4c0b      	ldr	r4, [pc, #44]	; (80007f4 <global_stdio_init.part.0+0x34>)
 80007c6:	4a0c      	ldr	r2, [pc, #48]	; (80007f8 <global_stdio_init.part.0+0x38>)
 80007c8:	601a      	str	r2, [r3, #0]
 80007ca:	4620      	mov	r0, r4
 80007cc:	2200      	movs	r2, #0
 80007ce:	2104      	movs	r1, #4
 80007d0:	f7ff ffa6 	bl	8000720 <std>
 80007d4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80007d8:	2201      	movs	r2, #1
 80007da:	2109      	movs	r1, #9
 80007dc:	f7ff ffa0 	bl	8000720 <std>
 80007e0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80007e4:	2202      	movs	r2, #2
 80007e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80007ea:	2112      	movs	r1, #18
 80007ec:	f7ff bf98 	b.w	8000720 <std>
 80007f0:	200001b4 	.word	0x200001b4
 80007f4:	2000007c 	.word	0x2000007c
 80007f8:	08000769 	.word	0x08000769

080007fc <__sfp_lock_acquire>:
 80007fc:	4801      	ldr	r0, [pc, #4]	; (8000804 <__sfp_lock_acquire+0x8>)
 80007fe:	f000 b90d 	b.w	8000a1c <__retarget_lock_acquire_recursive>
 8000802:	bf00      	nop
 8000804:	200001bd 	.word	0x200001bd

08000808 <__sfp_lock_release>:
 8000808:	4801      	ldr	r0, [pc, #4]	; (8000810 <__sfp_lock_release+0x8>)
 800080a:	f000 b908 	b.w	8000a1e <__retarget_lock_release_recursive>
 800080e:	bf00      	nop
 8000810:	200001bd 	.word	0x200001bd

08000814 <__sinit>:
 8000814:	b510      	push	{r4, lr}
 8000816:	4604      	mov	r4, r0
 8000818:	f7ff fff0 	bl	80007fc <__sfp_lock_acquire>
 800081c:	6a23      	ldr	r3, [r4, #32]
 800081e:	b11b      	cbz	r3, 8000828 <__sinit+0x14>
 8000820:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000824:	f7ff bff0 	b.w	8000808 <__sfp_lock_release>
 8000828:	4b04      	ldr	r3, [pc, #16]	; (800083c <__sinit+0x28>)
 800082a:	6223      	str	r3, [r4, #32]
 800082c:	4b04      	ldr	r3, [pc, #16]	; (8000840 <__sinit+0x2c>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	2b00      	cmp	r3, #0
 8000832:	d1f5      	bne.n	8000820 <__sinit+0xc>
 8000834:	f7ff ffc4 	bl	80007c0 <global_stdio_init.part.0>
 8000838:	e7f2      	b.n	8000820 <__sinit+0xc>
 800083a:	bf00      	nop
 800083c:	08000781 	.word	0x08000781
 8000840:	200001b4 	.word	0x200001b4

08000844 <_fwalk_sglue>:
 8000844:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000848:	4607      	mov	r7, r0
 800084a:	4688      	mov	r8, r1
 800084c:	4614      	mov	r4, r2
 800084e:	2600      	movs	r6, #0
 8000850:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000854:	f1b9 0901 	subs.w	r9, r9, #1
 8000858:	d505      	bpl.n	8000866 <_fwalk_sglue+0x22>
 800085a:	6824      	ldr	r4, [r4, #0]
 800085c:	2c00      	cmp	r4, #0
 800085e:	d1f7      	bne.n	8000850 <_fwalk_sglue+0xc>
 8000860:	4630      	mov	r0, r6
 8000862:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000866:	89ab      	ldrh	r3, [r5, #12]
 8000868:	2b01      	cmp	r3, #1
 800086a:	d907      	bls.n	800087c <_fwalk_sglue+0x38>
 800086c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000870:	3301      	adds	r3, #1
 8000872:	d003      	beq.n	800087c <_fwalk_sglue+0x38>
 8000874:	4629      	mov	r1, r5
 8000876:	4638      	mov	r0, r7
 8000878:	47c0      	blx	r8
 800087a:	4306      	orrs	r6, r0
 800087c:	3568      	adds	r5, #104	; 0x68
 800087e:	e7e9      	b.n	8000854 <_fwalk_sglue+0x10>

08000880 <iprintf>:
 8000880:	b40f      	push	{r0, r1, r2, r3}
 8000882:	b507      	push	{r0, r1, r2, lr}
 8000884:	4906      	ldr	r1, [pc, #24]	; (80008a0 <iprintf+0x20>)
 8000886:	ab04      	add	r3, sp, #16
 8000888:	6808      	ldr	r0, [r1, #0]
 800088a:	f853 2b04 	ldr.w	r2, [r3], #4
 800088e:	6881      	ldr	r1, [r0, #8]
 8000890:	9301      	str	r3, [sp, #4]
 8000892:	f000 f9e7 	bl	8000c64 <_vfiprintf_r>
 8000896:	b003      	add	sp, #12
 8000898:	f85d eb04 	ldr.w	lr, [sp], #4
 800089c:	b004      	add	sp, #16
 800089e:	4770      	bx	lr
 80008a0:	20000058 	.word	0x20000058

080008a4 <__sread>:
 80008a4:	b510      	push	{r4, lr}
 80008a6:	460c      	mov	r4, r1
 80008a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80008ac:	f000 f868 	bl	8000980 <_read_r>
 80008b0:	2800      	cmp	r0, #0
 80008b2:	bfab      	itete	ge
 80008b4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80008b6:	89a3      	ldrhlt	r3, [r4, #12]
 80008b8:	181b      	addge	r3, r3, r0
 80008ba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80008be:	bfac      	ite	ge
 80008c0:	6563      	strge	r3, [r4, #84]	; 0x54
 80008c2:	81a3      	strhlt	r3, [r4, #12]
 80008c4:	bd10      	pop	{r4, pc}

080008c6 <__swrite>:
 80008c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80008ca:	461f      	mov	r7, r3
 80008cc:	898b      	ldrh	r3, [r1, #12]
 80008ce:	05db      	lsls	r3, r3, #23
 80008d0:	4605      	mov	r5, r0
 80008d2:	460c      	mov	r4, r1
 80008d4:	4616      	mov	r6, r2
 80008d6:	d505      	bpl.n	80008e4 <__swrite+0x1e>
 80008d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80008dc:	2302      	movs	r3, #2
 80008de:	2200      	movs	r2, #0
 80008e0:	f000 f83c 	bl	800095c <_lseek_r>
 80008e4:	89a3      	ldrh	r3, [r4, #12]
 80008e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80008ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80008ee:	81a3      	strh	r3, [r4, #12]
 80008f0:	4632      	mov	r2, r6
 80008f2:	463b      	mov	r3, r7
 80008f4:	4628      	mov	r0, r5
 80008f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80008fa:	f000 b853 	b.w	80009a4 <_write_r>

080008fe <__sseek>:
 80008fe:	b510      	push	{r4, lr}
 8000900:	460c      	mov	r4, r1
 8000902:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000906:	f000 f829 	bl	800095c <_lseek_r>
 800090a:	1c43      	adds	r3, r0, #1
 800090c:	89a3      	ldrh	r3, [r4, #12]
 800090e:	bf15      	itete	ne
 8000910:	6560      	strne	r0, [r4, #84]	; 0x54
 8000912:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8000916:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800091a:	81a3      	strheq	r3, [r4, #12]
 800091c:	bf18      	it	ne
 800091e:	81a3      	strhne	r3, [r4, #12]
 8000920:	bd10      	pop	{r4, pc}

08000922 <__sclose>:
 8000922:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000926:	f000 b809 	b.w	800093c <_close_r>

0800092a <memset>:
 800092a:	4402      	add	r2, r0
 800092c:	4603      	mov	r3, r0
 800092e:	4293      	cmp	r3, r2
 8000930:	d100      	bne.n	8000934 <memset+0xa>
 8000932:	4770      	bx	lr
 8000934:	f803 1b01 	strb.w	r1, [r3], #1
 8000938:	e7f9      	b.n	800092e <memset+0x4>
	...

0800093c <_close_r>:
 800093c:	b538      	push	{r3, r4, r5, lr}
 800093e:	4d06      	ldr	r5, [pc, #24]	; (8000958 <_close_r+0x1c>)
 8000940:	2300      	movs	r3, #0
 8000942:	4604      	mov	r4, r0
 8000944:	4608      	mov	r0, r1
 8000946:	602b      	str	r3, [r5, #0]
 8000948:	f7ff fe55 	bl	80005f6 <_close>
 800094c:	1c43      	adds	r3, r0, #1
 800094e:	d102      	bne.n	8000956 <_close_r+0x1a>
 8000950:	682b      	ldr	r3, [r5, #0]
 8000952:	b103      	cbz	r3, 8000956 <_close_r+0x1a>
 8000954:	6023      	str	r3, [r4, #0]
 8000956:	bd38      	pop	{r3, r4, r5, pc}
 8000958:	200001b8 	.word	0x200001b8

0800095c <_lseek_r>:
 800095c:	b538      	push	{r3, r4, r5, lr}
 800095e:	4d07      	ldr	r5, [pc, #28]	; (800097c <_lseek_r+0x20>)
 8000960:	4604      	mov	r4, r0
 8000962:	4608      	mov	r0, r1
 8000964:	4611      	mov	r1, r2
 8000966:	2200      	movs	r2, #0
 8000968:	602a      	str	r2, [r5, #0]
 800096a:	461a      	mov	r2, r3
 800096c:	f7ff fe6a 	bl	8000644 <_lseek>
 8000970:	1c43      	adds	r3, r0, #1
 8000972:	d102      	bne.n	800097a <_lseek_r+0x1e>
 8000974:	682b      	ldr	r3, [r5, #0]
 8000976:	b103      	cbz	r3, 800097a <_lseek_r+0x1e>
 8000978:	6023      	str	r3, [r4, #0]
 800097a:	bd38      	pop	{r3, r4, r5, pc}
 800097c:	200001b8 	.word	0x200001b8

08000980 <_read_r>:
 8000980:	b538      	push	{r3, r4, r5, lr}
 8000982:	4d07      	ldr	r5, [pc, #28]	; (80009a0 <_read_r+0x20>)
 8000984:	4604      	mov	r4, r0
 8000986:	4608      	mov	r0, r1
 8000988:	4611      	mov	r1, r2
 800098a:	2200      	movs	r2, #0
 800098c:	602a      	str	r2, [r5, #0]
 800098e:	461a      	mov	r2, r3
 8000990:	f7ff fdf8 	bl	8000584 <_read>
 8000994:	1c43      	adds	r3, r0, #1
 8000996:	d102      	bne.n	800099e <_read_r+0x1e>
 8000998:	682b      	ldr	r3, [r5, #0]
 800099a:	b103      	cbz	r3, 800099e <_read_r+0x1e>
 800099c:	6023      	str	r3, [r4, #0]
 800099e:	bd38      	pop	{r3, r4, r5, pc}
 80009a0:	200001b8 	.word	0x200001b8

080009a4 <_write_r>:
 80009a4:	b538      	push	{r3, r4, r5, lr}
 80009a6:	4d07      	ldr	r5, [pc, #28]	; (80009c4 <_write_r+0x20>)
 80009a8:	4604      	mov	r4, r0
 80009aa:	4608      	mov	r0, r1
 80009ac:	4611      	mov	r1, r2
 80009ae:	2200      	movs	r2, #0
 80009b0:	602a      	str	r2, [r5, #0]
 80009b2:	461a      	mov	r2, r3
 80009b4:	f7ff fe03 	bl	80005be <_write>
 80009b8:	1c43      	adds	r3, r0, #1
 80009ba:	d102      	bne.n	80009c2 <_write_r+0x1e>
 80009bc:	682b      	ldr	r3, [r5, #0]
 80009be:	b103      	cbz	r3, 80009c2 <_write_r+0x1e>
 80009c0:	6023      	str	r3, [r4, #0]
 80009c2:	bd38      	pop	{r3, r4, r5, pc}
 80009c4:	200001b8 	.word	0x200001b8

080009c8 <__errno>:
 80009c8:	4b01      	ldr	r3, [pc, #4]	; (80009d0 <__errno+0x8>)
 80009ca:	6818      	ldr	r0, [r3, #0]
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop
 80009d0:	20000058 	.word	0x20000058

080009d4 <__libc_init_array>:
 80009d4:	b570      	push	{r4, r5, r6, lr}
 80009d6:	4d0d      	ldr	r5, [pc, #52]	; (8000a0c <__libc_init_array+0x38>)
 80009d8:	4c0d      	ldr	r4, [pc, #52]	; (8000a10 <__libc_init_array+0x3c>)
 80009da:	1b64      	subs	r4, r4, r5
 80009dc:	10a4      	asrs	r4, r4, #2
 80009de:	2600      	movs	r6, #0
 80009e0:	42a6      	cmp	r6, r4
 80009e2:	d109      	bne.n	80009f8 <__libc_init_array+0x24>
 80009e4:	4d0b      	ldr	r5, [pc, #44]	; (8000a14 <__libc_init_array+0x40>)
 80009e6:	4c0c      	ldr	r4, [pc, #48]	; (8000a18 <__libc_init_array+0x44>)
 80009e8:	f000 fdbe 	bl	8001568 <_init>
 80009ec:	1b64      	subs	r4, r4, r5
 80009ee:	10a4      	asrs	r4, r4, #2
 80009f0:	2600      	movs	r6, #0
 80009f2:	42a6      	cmp	r6, r4
 80009f4:	d105      	bne.n	8000a02 <__libc_init_array+0x2e>
 80009f6:	bd70      	pop	{r4, r5, r6, pc}
 80009f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80009fc:	4798      	blx	r3
 80009fe:	3601      	adds	r6, #1
 8000a00:	e7ee      	b.n	80009e0 <__libc_init_array+0xc>
 8000a02:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a06:	4798      	blx	r3
 8000a08:	3601      	adds	r6, #1
 8000a0a:	e7f2      	b.n	80009f2 <__libc_init_array+0x1e>
 8000a0c:	080015f4 	.word	0x080015f4
 8000a10:	080015f4 	.word	0x080015f4
 8000a14:	080015f4 	.word	0x080015f4
 8000a18:	080015f8 	.word	0x080015f8

08000a1c <__retarget_lock_acquire_recursive>:
 8000a1c:	4770      	bx	lr

08000a1e <__retarget_lock_release_recursive>:
 8000a1e:	4770      	bx	lr

08000a20 <_free_r>:
 8000a20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000a22:	2900      	cmp	r1, #0
 8000a24:	d044      	beq.n	8000ab0 <_free_r+0x90>
 8000a26:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000a2a:	9001      	str	r0, [sp, #4]
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	f1a1 0404 	sub.w	r4, r1, #4
 8000a32:	bfb8      	it	lt
 8000a34:	18e4      	addlt	r4, r4, r3
 8000a36:	f000 f8df 	bl	8000bf8 <__malloc_lock>
 8000a3a:	4a1e      	ldr	r2, [pc, #120]	; (8000ab4 <_free_r+0x94>)
 8000a3c:	9801      	ldr	r0, [sp, #4]
 8000a3e:	6813      	ldr	r3, [r2, #0]
 8000a40:	b933      	cbnz	r3, 8000a50 <_free_r+0x30>
 8000a42:	6063      	str	r3, [r4, #4]
 8000a44:	6014      	str	r4, [r2, #0]
 8000a46:	b003      	add	sp, #12
 8000a48:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000a4c:	f000 b8da 	b.w	8000c04 <__malloc_unlock>
 8000a50:	42a3      	cmp	r3, r4
 8000a52:	d908      	bls.n	8000a66 <_free_r+0x46>
 8000a54:	6825      	ldr	r5, [r4, #0]
 8000a56:	1961      	adds	r1, r4, r5
 8000a58:	428b      	cmp	r3, r1
 8000a5a:	bf01      	itttt	eq
 8000a5c:	6819      	ldreq	r1, [r3, #0]
 8000a5e:	685b      	ldreq	r3, [r3, #4]
 8000a60:	1949      	addeq	r1, r1, r5
 8000a62:	6021      	streq	r1, [r4, #0]
 8000a64:	e7ed      	b.n	8000a42 <_free_r+0x22>
 8000a66:	461a      	mov	r2, r3
 8000a68:	685b      	ldr	r3, [r3, #4]
 8000a6a:	b10b      	cbz	r3, 8000a70 <_free_r+0x50>
 8000a6c:	42a3      	cmp	r3, r4
 8000a6e:	d9fa      	bls.n	8000a66 <_free_r+0x46>
 8000a70:	6811      	ldr	r1, [r2, #0]
 8000a72:	1855      	adds	r5, r2, r1
 8000a74:	42a5      	cmp	r5, r4
 8000a76:	d10b      	bne.n	8000a90 <_free_r+0x70>
 8000a78:	6824      	ldr	r4, [r4, #0]
 8000a7a:	4421      	add	r1, r4
 8000a7c:	1854      	adds	r4, r2, r1
 8000a7e:	42a3      	cmp	r3, r4
 8000a80:	6011      	str	r1, [r2, #0]
 8000a82:	d1e0      	bne.n	8000a46 <_free_r+0x26>
 8000a84:	681c      	ldr	r4, [r3, #0]
 8000a86:	685b      	ldr	r3, [r3, #4]
 8000a88:	6053      	str	r3, [r2, #4]
 8000a8a:	440c      	add	r4, r1
 8000a8c:	6014      	str	r4, [r2, #0]
 8000a8e:	e7da      	b.n	8000a46 <_free_r+0x26>
 8000a90:	d902      	bls.n	8000a98 <_free_r+0x78>
 8000a92:	230c      	movs	r3, #12
 8000a94:	6003      	str	r3, [r0, #0]
 8000a96:	e7d6      	b.n	8000a46 <_free_r+0x26>
 8000a98:	6825      	ldr	r5, [r4, #0]
 8000a9a:	1961      	adds	r1, r4, r5
 8000a9c:	428b      	cmp	r3, r1
 8000a9e:	bf04      	itt	eq
 8000aa0:	6819      	ldreq	r1, [r3, #0]
 8000aa2:	685b      	ldreq	r3, [r3, #4]
 8000aa4:	6063      	str	r3, [r4, #4]
 8000aa6:	bf04      	itt	eq
 8000aa8:	1949      	addeq	r1, r1, r5
 8000aaa:	6021      	streq	r1, [r4, #0]
 8000aac:	6054      	str	r4, [r2, #4]
 8000aae:	e7ca      	b.n	8000a46 <_free_r+0x26>
 8000ab0:	b003      	add	sp, #12
 8000ab2:	bd30      	pop	{r4, r5, pc}
 8000ab4:	200001c0 	.word	0x200001c0

08000ab8 <sbrk_aligned>:
 8000ab8:	b570      	push	{r4, r5, r6, lr}
 8000aba:	4e0e      	ldr	r6, [pc, #56]	; (8000af4 <sbrk_aligned+0x3c>)
 8000abc:	460c      	mov	r4, r1
 8000abe:	6831      	ldr	r1, [r6, #0]
 8000ac0:	4605      	mov	r5, r0
 8000ac2:	b911      	cbnz	r1, 8000aca <sbrk_aligned+0x12>
 8000ac4:	f000 fcbc 	bl	8001440 <_sbrk_r>
 8000ac8:	6030      	str	r0, [r6, #0]
 8000aca:	4621      	mov	r1, r4
 8000acc:	4628      	mov	r0, r5
 8000ace:	f000 fcb7 	bl	8001440 <_sbrk_r>
 8000ad2:	1c43      	adds	r3, r0, #1
 8000ad4:	d00a      	beq.n	8000aec <sbrk_aligned+0x34>
 8000ad6:	1cc4      	adds	r4, r0, #3
 8000ad8:	f024 0403 	bic.w	r4, r4, #3
 8000adc:	42a0      	cmp	r0, r4
 8000ade:	d007      	beq.n	8000af0 <sbrk_aligned+0x38>
 8000ae0:	1a21      	subs	r1, r4, r0
 8000ae2:	4628      	mov	r0, r5
 8000ae4:	f000 fcac 	bl	8001440 <_sbrk_r>
 8000ae8:	3001      	adds	r0, #1
 8000aea:	d101      	bne.n	8000af0 <sbrk_aligned+0x38>
 8000aec:	f04f 34ff 	mov.w	r4, #4294967295
 8000af0:	4620      	mov	r0, r4
 8000af2:	bd70      	pop	{r4, r5, r6, pc}
 8000af4:	200001c4 	.word	0x200001c4

08000af8 <_malloc_r>:
 8000af8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000afc:	1ccd      	adds	r5, r1, #3
 8000afe:	f025 0503 	bic.w	r5, r5, #3
 8000b02:	3508      	adds	r5, #8
 8000b04:	2d0c      	cmp	r5, #12
 8000b06:	bf38      	it	cc
 8000b08:	250c      	movcc	r5, #12
 8000b0a:	2d00      	cmp	r5, #0
 8000b0c:	4607      	mov	r7, r0
 8000b0e:	db01      	blt.n	8000b14 <_malloc_r+0x1c>
 8000b10:	42a9      	cmp	r1, r5
 8000b12:	d905      	bls.n	8000b20 <_malloc_r+0x28>
 8000b14:	230c      	movs	r3, #12
 8000b16:	603b      	str	r3, [r7, #0]
 8000b18:	2600      	movs	r6, #0
 8000b1a:	4630      	mov	r0, r6
 8000b1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000b20:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8000bf4 <_malloc_r+0xfc>
 8000b24:	f000 f868 	bl	8000bf8 <__malloc_lock>
 8000b28:	f8d8 3000 	ldr.w	r3, [r8]
 8000b2c:	461c      	mov	r4, r3
 8000b2e:	bb5c      	cbnz	r4, 8000b88 <_malloc_r+0x90>
 8000b30:	4629      	mov	r1, r5
 8000b32:	4638      	mov	r0, r7
 8000b34:	f7ff ffc0 	bl	8000ab8 <sbrk_aligned>
 8000b38:	1c43      	adds	r3, r0, #1
 8000b3a:	4604      	mov	r4, r0
 8000b3c:	d155      	bne.n	8000bea <_malloc_r+0xf2>
 8000b3e:	f8d8 4000 	ldr.w	r4, [r8]
 8000b42:	4626      	mov	r6, r4
 8000b44:	2e00      	cmp	r6, #0
 8000b46:	d145      	bne.n	8000bd4 <_malloc_r+0xdc>
 8000b48:	2c00      	cmp	r4, #0
 8000b4a:	d048      	beq.n	8000bde <_malloc_r+0xe6>
 8000b4c:	6823      	ldr	r3, [r4, #0]
 8000b4e:	4631      	mov	r1, r6
 8000b50:	4638      	mov	r0, r7
 8000b52:	eb04 0903 	add.w	r9, r4, r3
 8000b56:	f000 fc73 	bl	8001440 <_sbrk_r>
 8000b5a:	4581      	cmp	r9, r0
 8000b5c:	d13f      	bne.n	8000bde <_malloc_r+0xe6>
 8000b5e:	6821      	ldr	r1, [r4, #0]
 8000b60:	1a6d      	subs	r5, r5, r1
 8000b62:	4629      	mov	r1, r5
 8000b64:	4638      	mov	r0, r7
 8000b66:	f7ff ffa7 	bl	8000ab8 <sbrk_aligned>
 8000b6a:	3001      	adds	r0, #1
 8000b6c:	d037      	beq.n	8000bde <_malloc_r+0xe6>
 8000b6e:	6823      	ldr	r3, [r4, #0]
 8000b70:	442b      	add	r3, r5
 8000b72:	6023      	str	r3, [r4, #0]
 8000b74:	f8d8 3000 	ldr.w	r3, [r8]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d038      	beq.n	8000bee <_malloc_r+0xf6>
 8000b7c:	685a      	ldr	r2, [r3, #4]
 8000b7e:	42a2      	cmp	r2, r4
 8000b80:	d12b      	bne.n	8000bda <_malloc_r+0xe2>
 8000b82:	2200      	movs	r2, #0
 8000b84:	605a      	str	r2, [r3, #4]
 8000b86:	e00f      	b.n	8000ba8 <_malloc_r+0xb0>
 8000b88:	6822      	ldr	r2, [r4, #0]
 8000b8a:	1b52      	subs	r2, r2, r5
 8000b8c:	d41f      	bmi.n	8000bce <_malloc_r+0xd6>
 8000b8e:	2a0b      	cmp	r2, #11
 8000b90:	d917      	bls.n	8000bc2 <_malloc_r+0xca>
 8000b92:	1961      	adds	r1, r4, r5
 8000b94:	42a3      	cmp	r3, r4
 8000b96:	6025      	str	r5, [r4, #0]
 8000b98:	bf18      	it	ne
 8000b9a:	6059      	strne	r1, [r3, #4]
 8000b9c:	6863      	ldr	r3, [r4, #4]
 8000b9e:	bf08      	it	eq
 8000ba0:	f8c8 1000 	streq.w	r1, [r8]
 8000ba4:	5162      	str	r2, [r4, r5]
 8000ba6:	604b      	str	r3, [r1, #4]
 8000ba8:	4638      	mov	r0, r7
 8000baa:	f104 060b 	add.w	r6, r4, #11
 8000bae:	f000 f829 	bl	8000c04 <__malloc_unlock>
 8000bb2:	f026 0607 	bic.w	r6, r6, #7
 8000bb6:	1d23      	adds	r3, r4, #4
 8000bb8:	1af2      	subs	r2, r6, r3
 8000bba:	d0ae      	beq.n	8000b1a <_malloc_r+0x22>
 8000bbc:	1b9b      	subs	r3, r3, r6
 8000bbe:	50a3      	str	r3, [r4, r2]
 8000bc0:	e7ab      	b.n	8000b1a <_malloc_r+0x22>
 8000bc2:	42a3      	cmp	r3, r4
 8000bc4:	6862      	ldr	r2, [r4, #4]
 8000bc6:	d1dd      	bne.n	8000b84 <_malloc_r+0x8c>
 8000bc8:	f8c8 2000 	str.w	r2, [r8]
 8000bcc:	e7ec      	b.n	8000ba8 <_malloc_r+0xb0>
 8000bce:	4623      	mov	r3, r4
 8000bd0:	6864      	ldr	r4, [r4, #4]
 8000bd2:	e7ac      	b.n	8000b2e <_malloc_r+0x36>
 8000bd4:	4634      	mov	r4, r6
 8000bd6:	6876      	ldr	r6, [r6, #4]
 8000bd8:	e7b4      	b.n	8000b44 <_malloc_r+0x4c>
 8000bda:	4613      	mov	r3, r2
 8000bdc:	e7cc      	b.n	8000b78 <_malloc_r+0x80>
 8000bde:	230c      	movs	r3, #12
 8000be0:	603b      	str	r3, [r7, #0]
 8000be2:	4638      	mov	r0, r7
 8000be4:	f000 f80e 	bl	8000c04 <__malloc_unlock>
 8000be8:	e797      	b.n	8000b1a <_malloc_r+0x22>
 8000bea:	6025      	str	r5, [r4, #0]
 8000bec:	e7dc      	b.n	8000ba8 <_malloc_r+0xb0>
 8000bee:	605b      	str	r3, [r3, #4]
 8000bf0:	deff      	udf	#255	; 0xff
 8000bf2:	bf00      	nop
 8000bf4:	200001c0 	.word	0x200001c0

08000bf8 <__malloc_lock>:
 8000bf8:	4801      	ldr	r0, [pc, #4]	; (8000c00 <__malloc_lock+0x8>)
 8000bfa:	f7ff bf0f 	b.w	8000a1c <__retarget_lock_acquire_recursive>
 8000bfe:	bf00      	nop
 8000c00:	200001bc 	.word	0x200001bc

08000c04 <__malloc_unlock>:
 8000c04:	4801      	ldr	r0, [pc, #4]	; (8000c0c <__malloc_unlock+0x8>)
 8000c06:	f7ff bf0a 	b.w	8000a1e <__retarget_lock_release_recursive>
 8000c0a:	bf00      	nop
 8000c0c:	200001bc 	.word	0x200001bc

08000c10 <__sfputc_r>:
 8000c10:	6893      	ldr	r3, [r2, #8]
 8000c12:	3b01      	subs	r3, #1
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	b410      	push	{r4}
 8000c18:	6093      	str	r3, [r2, #8]
 8000c1a:	da08      	bge.n	8000c2e <__sfputc_r+0x1e>
 8000c1c:	6994      	ldr	r4, [r2, #24]
 8000c1e:	42a3      	cmp	r3, r4
 8000c20:	db01      	blt.n	8000c26 <__sfputc_r+0x16>
 8000c22:	290a      	cmp	r1, #10
 8000c24:	d103      	bne.n	8000c2e <__sfputc_r+0x1e>
 8000c26:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000c2a:	f000 bb73 	b.w	8001314 <__swbuf_r>
 8000c2e:	6813      	ldr	r3, [r2, #0]
 8000c30:	1c58      	adds	r0, r3, #1
 8000c32:	6010      	str	r0, [r2, #0]
 8000c34:	7019      	strb	r1, [r3, #0]
 8000c36:	4608      	mov	r0, r1
 8000c38:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000c3c:	4770      	bx	lr

08000c3e <__sfputs_r>:
 8000c3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c40:	4606      	mov	r6, r0
 8000c42:	460f      	mov	r7, r1
 8000c44:	4614      	mov	r4, r2
 8000c46:	18d5      	adds	r5, r2, r3
 8000c48:	42ac      	cmp	r4, r5
 8000c4a:	d101      	bne.n	8000c50 <__sfputs_r+0x12>
 8000c4c:	2000      	movs	r0, #0
 8000c4e:	e007      	b.n	8000c60 <__sfputs_r+0x22>
 8000c50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000c54:	463a      	mov	r2, r7
 8000c56:	4630      	mov	r0, r6
 8000c58:	f7ff ffda 	bl	8000c10 <__sfputc_r>
 8000c5c:	1c43      	adds	r3, r0, #1
 8000c5e:	d1f3      	bne.n	8000c48 <__sfputs_r+0xa>
 8000c60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000c64 <_vfiprintf_r>:
 8000c64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c68:	460d      	mov	r5, r1
 8000c6a:	b09d      	sub	sp, #116	; 0x74
 8000c6c:	4614      	mov	r4, r2
 8000c6e:	4698      	mov	r8, r3
 8000c70:	4606      	mov	r6, r0
 8000c72:	b118      	cbz	r0, 8000c7c <_vfiprintf_r+0x18>
 8000c74:	6a03      	ldr	r3, [r0, #32]
 8000c76:	b90b      	cbnz	r3, 8000c7c <_vfiprintf_r+0x18>
 8000c78:	f7ff fdcc 	bl	8000814 <__sinit>
 8000c7c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000c7e:	07d9      	lsls	r1, r3, #31
 8000c80:	d405      	bmi.n	8000c8e <_vfiprintf_r+0x2a>
 8000c82:	89ab      	ldrh	r3, [r5, #12]
 8000c84:	059a      	lsls	r2, r3, #22
 8000c86:	d402      	bmi.n	8000c8e <_vfiprintf_r+0x2a>
 8000c88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000c8a:	f7ff fec7 	bl	8000a1c <__retarget_lock_acquire_recursive>
 8000c8e:	89ab      	ldrh	r3, [r5, #12]
 8000c90:	071b      	lsls	r3, r3, #28
 8000c92:	d501      	bpl.n	8000c98 <_vfiprintf_r+0x34>
 8000c94:	692b      	ldr	r3, [r5, #16]
 8000c96:	b99b      	cbnz	r3, 8000cc0 <_vfiprintf_r+0x5c>
 8000c98:	4629      	mov	r1, r5
 8000c9a:	4630      	mov	r0, r6
 8000c9c:	f000 fb78 	bl	8001390 <__swsetup_r>
 8000ca0:	b170      	cbz	r0, 8000cc0 <_vfiprintf_r+0x5c>
 8000ca2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000ca4:	07dc      	lsls	r4, r3, #31
 8000ca6:	d504      	bpl.n	8000cb2 <_vfiprintf_r+0x4e>
 8000ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8000cac:	b01d      	add	sp, #116	; 0x74
 8000cae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000cb2:	89ab      	ldrh	r3, [r5, #12]
 8000cb4:	0598      	lsls	r0, r3, #22
 8000cb6:	d4f7      	bmi.n	8000ca8 <_vfiprintf_r+0x44>
 8000cb8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000cba:	f7ff feb0 	bl	8000a1e <__retarget_lock_release_recursive>
 8000cbe:	e7f3      	b.n	8000ca8 <_vfiprintf_r+0x44>
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	9309      	str	r3, [sp, #36]	; 0x24
 8000cc4:	2320      	movs	r3, #32
 8000cc6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000cca:	f8cd 800c 	str.w	r8, [sp, #12]
 8000cce:	2330      	movs	r3, #48	; 0x30
 8000cd0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8000e84 <_vfiprintf_r+0x220>
 8000cd4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000cd8:	f04f 0901 	mov.w	r9, #1
 8000cdc:	4623      	mov	r3, r4
 8000cde:	469a      	mov	sl, r3
 8000ce0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000ce4:	b10a      	cbz	r2, 8000cea <_vfiprintf_r+0x86>
 8000ce6:	2a25      	cmp	r2, #37	; 0x25
 8000ce8:	d1f9      	bne.n	8000cde <_vfiprintf_r+0x7a>
 8000cea:	ebba 0b04 	subs.w	fp, sl, r4
 8000cee:	d00b      	beq.n	8000d08 <_vfiprintf_r+0xa4>
 8000cf0:	465b      	mov	r3, fp
 8000cf2:	4622      	mov	r2, r4
 8000cf4:	4629      	mov	r1, r5
 8000cf6:	4630      	mov	r0, r6
 8000cf8:	f7ff ffa1 	bl	8000c3e <__sfputs_r>
 8000cfc:	3001      	adds	r0, #1
 8000cfe:	f000 80a9 	beq.w	8000e54 <_vfiprintf_r+0x1f0>
 8000d02:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000d04:	445a      	add	r2, fp
 8000d06:	9209      	str	r2, [sp, #36]	; 0x24
 8000d08:	f89a 3000 	ldrb.w	r3, [sl]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	f000 80a1 	beq.w	8000e54 <_vfiprintf_r+0x1f0>
 8000d12:	2300      	movs	r3, #0
 8000d14:	f04f 32ff 	mov.w	r2, #4294967295
 8000d18:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000d1c:	f10a 0a01 	add.w	sl, sl, #1
 8000d20:	9304      	str	r3, [sp, #16]
 8000d22:	9307      	str	r3, [sp, #28]
 8000d24:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000d28:	931a      	str	r3, [sp, #104]	; 0x68
 8000d2a:	4654      	mov	r4, sl
 8000d2c:	2205      	movs	r2, #5
 8000d2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000d32:	4854      	ldr	r0, [pc, #336]	; (8000e84 <_vfiprintf_r+0x220>)
 8000d34:	f7ff fa5c 	bl	80001f0 <memchr>
 8000d38:	9a04      	ldr	r2, [sp, #16]
 8000d3a:	b9d8      	cbnz	r0, 8000d74 <_vfiprintf_r+0x110>
 8000d3c:	06d1      	lsls	r1, r2, #27
 8000d3e:	bf44      	itt	mi
 8000d40:	2320      	movmi	r3, #32
 8000d42:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000d46:	0713      	lsls	r3, r2, #28
 8000d48:	bf44      	itt	mi
 8000d4a:	232b      	movmi	r3, #43	; 0x2b
 8000d4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000d50:	f89a 3000 	ldrb.w	r3, [sl]
 8000d54:	2b2a      	cmp	r3, #42	; 0x2a
 8000d56:	d015      	beq.n	8000d84 <_vfiprintf_r+0x120>
 8000d58:	9a07      	ldr	r2, [sp, #28]
 8000d5a:	4654      	mov	r4, sl
 8000d5c:	2000      	movs	r0, #0
 8000d5e:	f04f 0c0a 	mov.w	ip, #10
 8000d62:	4621      	mov	r1, r4
 8000d64:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000d68:	3b30      	subs	r3, #48	; 0x30
 8000d6a:	2b09      	cmp	r3, #9
 8000d6c:	d94d      	bls.n	8000e0a <_vfiprintf_r+0x1a6>
 8000d6e:	b1b0      	cbz	r0, 8000d9e <_vfiprintf_r+0x13a>
 8000d70:	9207      	str	r2, [sp, #28]
 8000d72:	e014      	b.n	8000d9e <_vfiprintf_r+0x13a>
 8000d74:	eba0 0308 	sub.w	r3, r0, r8
 8000d78:	fa09 f303 	lsl.w	r3, r9, r3
 8000d7c:	4313      	orrs	r3, r2
 8000d7e:	9304      	str	r3, [sp, #16]
 8000d80:	46a2      	mov	sl, r4
 8000d82:	e7d2      	b.n	8000d2a <_vfiprintf_r+0xc6>
 8000d84:	9b03      	ldr	r3, [sp, #12]
 8000d86:	1d19      	adds	r1, r3, #4
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	9103      	str	r1, [sp, #12]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	bfbb      	ittet	lt
 8000d90:	425b      	neglt	r3, r3
 8000d92:	f042 0202 	orrlt.w	r2, r2, #2
 8000d96:	9307      	strge	r3, [sp, #28]
 8000d98:	9307      	strlt	r3, [sp, #28]
 8000d9a:	bfb8      	it	lt
 8000d9c:	9204      	strlt	r2, [sp, #16]
 8000d9e:	7823      	ldrb	r3, [r4, #0]
 8000da0:	2b2e      	cmp	r3, #46	; 0x2e
 8000da2:	d10c      	bne.n	8000dbe <_vfiprintf_r+0x15a>
 8000da4:	7863      	ldrb	r3, [r4, #1]
 8000da6:	2b2a      	cmp	r3, #42	; 0x2a
 8000da8:	d134      	bne.n	8000e14 <_vfiprintf_r+0x1b0>
 8000daa:	9b03      	ldr	r3, [sp, #12]
 8000dac:	1d1a      	adds	r2, r3, #4
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	9203      	str	r2, [sp, #12]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	bfb8      	it	lt
 8000db6:	f04f 33ff 	movlt.w	r3, #4294967295
 8000dba:	3402      	adds	r4, #2
 8000dbc:	9305      	str	r3, [sp, #20]
 8000dbe:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8000e94 <_vfiprintf_r+0x230>
 8000dc2:	7821      	ldrb	r1, [r4, #0]
 8000dc4:	2203      	movs	r2, #3
 8000dc6:	4650      	mov	r0, sl
 8000dc8:	f7ff fa12 	bl	80001f0 <memchr>
 8000dcc:	b138      	cbz	r0, 8000dde <_vfiprintf_r+0x17a>
 8000dce:	9b04      	ldr	r3, [sp, #16]
 8000dd0:	eba0 000a 	sub.w	r0, r0, sl
 8000dd4:	2240      	movs	r2, #64	; 0x40
 8000dd6:	4082      	lsls	r2, r0
 8000dd8:	4313      	orrs	r3, r2
 8000dda:	3401      	adds	r4, #1
 8000ddc:	9304      	str	r3, [sp, #16]
 8000dde:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000de2:	4829      	ldr	r0, [pc, #164]	; (8000e88 <_vfiprintf_r+0x224>)
 8000de4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000de8:	2206      	movs	r2, #6
 8000dea:	f7ff fa01 	bl	80001f0 <memchr>
 8000dee:	2800      	cmp	r0, #0
 8000df0:	d03f      	beq.n	8000e72 <_vfiprintf_r+0x20e>
 8000df2:	4b26      	ldr	r3, [pc, #152]	; (8000e8c <_vfiprintf_r+0x228>)
 8000df4:	bb1b      	cbnz	r3, 8000e3e <_vfiprintf_r+0x1da>
 8000df6:	9b03      	ldr	r3, [sp, #12]
 8000df8:	3307      	adds	r3, #7
 8000dfa:	f023 0307 	bic.w	r3, r3, #7
 8000dfe:	3308      	adds	r3, #8
 8000e00:	9303      	str	r3, [sp, #12]
 8000e02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000e04:	443b      	add	r3, r7
 8000e06:	9309      	str	r3, [sp, #36]	; 0x24
 8000e08:	e768      	b.n	8000cdc <_vfiprintf_r+0x78>
 8000e0a:	fb0c 3202 	mla	r2, ip, r2, r3
 8000e0e:	460c      	mov	r4, r1
 8000e10:	2001      	movs	r0, #1
 8000e12:	e7a6      	b.n	8000d62 <_vfiprintf_r+0xfe>
 8000e14:	2300      	movs	r3, #0
 8000e16:	3401      	adds	r4, #1
 8000e18:	9305      	str	r3, [sp, #20]
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	f04f 0c0a 	mov.w	ip, #10
 8000e20:	4620      	mov	r0, r4
 8000e22:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000e26:	3a30      	subs	r2, #48	; 0x30
 8000e28:	2a09      	cmp	r2, #9
 8000e2a:	d903      	bls.n	8000e34 <_vfiprintf_r+0x1d0>
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d0c6      	beq.n	8000dbe <_vfiprintf_r+0x15a>
 8000e30:	9105      	str	r1, [sp, #20]
 8000e32:	e7c4      	b.n	8000dbe <_vfiprintf_r+0x15a>
 8000e34:	fb0c 2101 	mla	r1, ip, r1, r2
 8000e38:	4604      	mov	r4, r0
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	e7f0      	b.n	8000e20 <_vfiprintf_r+0x1bc>
 8000e3e:	ab03      	add	r3, sp, #12
 8000e40:	9300      	str	r3, [sp, #0]
 8000e42:	462a      	mov	r2, r5
 8000e44:	4b12      	ldr	r3, [pc, #72]	; (8000e90 <_vfiprintf_r+0x22c>)
 8000e46:	a904      	add	r1, sp, #16
 8000e48:	4630      	mov	r0, r6
 8000e4a:	f3af 8000 	nop.w
 8000e4e:	4607      	mov	r7, r0
 8000e50:	1c78      	adds	r0, r7, #1
 8000e52:	d1d6      	bne.n	8000e02 <_vfiprintf_r+0x19e>
 8000e54:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000e56:	07d9      	lsls	r1, r3, #31
 8000e58:	d405      	bmi.n	8000e66 <_vfiprintf_r+0x202>
 8000e5a:	89ab      	ldrh	r3, [r5, #12]
 8000e5c:	059a      	lsls	r2, r3, #22
 8000e5e:	d402      	bmi.n	8000e66 <_vfiprintf_r+0x202>
 8000e60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000e62:	f7ff fddc 	bl	8000a1e <__retarget_lock_release_recursive>
 8000e66:	89ab      	ldrh	r3, [r5, #12]
 8000e68:	065b      	lsls	r3, r3, #25
 8000e6a:	f53f af1d 	bmi.w	8000ca8 <_vfiprintf_r+0x44>
 8000e6e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000e70:	e71c      	b.n	8000cac <_vfiprintf_r+0x48>
 8000e72:	ab03      	add	r3, sp, #12
 8000e74:	9300      	str	r3, [sp, #0]
 8000e76:	462a      	mov	r2, r5
 8000e78:	4b05      	ldr	r3, [pc, #20]	; (8000e90 <_vfiprintf_r+0x22c>)
 8000e7a:	a904      	add	r1, sp, #16
 8000e7c:	4630      	mov	r0, r6
 8000e7e:	f000 f879 	bl	8000f74 <_printf_i>
 8000e82:	e7e4      	b.n	8000e4e <_vfiprintf_r+0x1ea>
 8000e84:	080015c0 	.word	0x080015c0
 8000e88:	080015ca 	.word	0x080015ca
 8000e8c:	00000000 	.word	0x00000000
 8000e90:	08000c3f 	.word	0x08000c3f
 8000e94:	080015c6 	.word	0x080015c6

08000e98 <_printf_common>:
 8000e98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e9c:	4616      	mov	r6, r2
 8000e9e:	4699      	mov	r9, r3
 8000ea0:	688a      	ldr	r2, [r1, #8]
 8000ea2:	690b      	ldr	r3, [r1, #16]
 8000ea4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000ea8:	4293      	cmp	r3, r2
 8000eaa:	bfb8      	it	lt
 8000eac:	4613      	movlt	r3, r2
 8000eae:	6033      	str	r3, [r6, #0]
 8000eb0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000eb4:	4607      	mov	r7, r0
 8000eb6:	460c      	mov	r4, r1
 8000eb8:	b10a      	cbz	r2, 8000ebe <_printf_common+0x26>
 8000eba:	3301      	adds	r3, #1
 8000ebc:	6033      	str	r3, [r6, #0]
 8000ebe:	6823      	ldr	r3, [r4, #0]
 8000ec0:	0699      	lsls	r1, r3, #26
 8000ec2:	bf42      	ittt	mi
 8000ec4:	6833      	ldrmi	r3, [r6, #0]
 8000ec6:	3302      	addmi	r3, #2
 8000ec8:	6033      	strmi	r3, [r6, #0]
 8000eca:	6825      	ldr	r5, [r4, #0]
 8000ecc:	f015 0506 	ands.w	r5, r5, #6
 8000ed0:	d106      	bne.n	8000ee0 <_printf_common+0x48>
 8000ed2:	f104 0a19 	add.w	sl, r4, #25
 8000ed6:	68e3      	ldr	r3, [r4, #12]
 8000ed8:	6832      	ldr	r2, [r6, #0]
 8000eda:	1a9b      	subs	r3, r3, r2
 8000edc:	42ab      	cmp	r3, r5
 8000ede:	dc26      	bgt.n	8000f2e <_printf_common+0x96>
 8000ee0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8000ee4:	1e13      	subs	r3, r2, #0
 8000ee6:	6822      	ldr	r2, [r4, #0]
 8000ee8:	bf18      	it	ne
 8000eea:	2301      	movne	r3, #1
 8000eec:	0692      	lsls	r2, r2, #26
 8000eee:	d42b      	bmi.n	8000f48 <_printf_common+0xb0>
 8000ef0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000ef4:	4649      	mov	r1, r9
 8000ef6:	4638      	mov	r0, r7
 8000ef8:	47c0      	blx	r8
 8000efa:	3001      	adds	r0, #1
 8000efc:	d01e      	beq.n	8000f3c <_printf_common+0xa4>
 8000efe:	6823      	ldr	r3, [r4, #0]
 8000f00:	6922      	ldr	r2, [r4, #16]
 8000f02:	f003 0306 	and.w	r3, r3, #6
 8000f06:	2b04      	cmp	r3, #4
 8000f08:	bf02      	ittt	eq
 8000f0a:	68e5      	ldreq	r5, [r4, #12]
 8000f0c:	6833      	ldreq	r3, [r6, #0]
 8000f0e:	1aed      	subeq	r5, r5, r3
 8000f10:	68a3      	ldr	r3, [r4, #8]
 8000f12:	bf0c      	ite	eq
 8000f14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000f18:	2500      	movne	r5, #0
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	bfc4      	itt	gt
 8000f1e:	1a9b      	subgt	r3, r3, r2
 8000f20:	18ed      	addgt	r5, r5, r3
 8000f22:	2600      	movs	r6, #0
 8000f24:	341a      	adds	r4, #26
 8000f26:	42b5      	cmp	r5, r6
 8000f28:	d11a      	bne.n	8000f60 <_printf_common+0xc8>
 8000f2a:	2000      	movs	r0, #0
 8000f2c:	e008      	b.n	8000f40 <_printf_common+0xa8>
 8000f2e:	2301      	movs	r3, #1
 8000f30:	4652      	mov	r2, sl
 8000f32:	4649      	mov	r1, r9
 8000f34:	4638      	mov	r0, r7
 8000f36:	47c0      	blx	r8
 8000f38:	3001      	adds	r0, #1
 8000f3a:	d103      	bne.n	8000f44 <_printf_common+0xac>
 8000f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f44:	3501      	adds	r5, #1
 8000f46:	e7c6      	b.n	8000ed6 <_printf_common+0x3e>
 8000f48:	18e1      	adds	r1, r4, r3
 8000f4a:	1c5a      	adds	r2, r3, #1
 8000f4c:	2030      	movs	r0, #48	; 0x30
 8000f4e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8000f52:	4422      	add	r2, r4
 8000f54:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8000f58:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8000f5c:	3302      	adds	r3, #2
 8000f5e:	e7c7      	b.n	8000ef0 <_printf_common+0x58>
 8000f60:	2301      	movs	r3, #1
 8000f62:	4622      	mov	r2, r4
 8000f64:	4649      	mov	r1, r9
 8000f66:	4638      	mov	r0, r7
 8000f68:	47c0      	blx	r8
 8000f6a:	3001      	adds	r0, #1
 8000f6c:	d0e6      	beq.n	8000f3c <_printf_common+0xa4>
 8000f6e:	3601      	adds	r6, #1
 8000f70:	e7d9      	b.n	8000f26 <_printf_common+0x8e>
	...

08000f74 <_printf_i>:
 8000f74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000f78:	7e0f      	ldrb	r7, [r1, #24]
 8000f7a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8000f7c:	2f78      	cmp	r7, #120	; 0x78
 8000f7e:	4691      	mov	r9, r2
 8000f80:	4680      	mov	r8, r0
 8000f82:	460c      	mov	r4, r1
 8000f84:	469a      	mov	sl, r3
 8000f86:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8000f8a:	d807      	bhi.n	8000f9c <_printf_i+0x28>
 8000f8c:	2f62      	cmp	r7, #98	; 0x62
 8000f8e:	d80a      	bhi.n	8000fa6 <_printf_i+0x32>
 8000f90:	2f00      	cmp	r7, #0
 8000f92:	f000 80d4 	beq.w	800113e <_printf_i+0x1ca>
 8000f96:	2f58      	cmp	r7, #88	; 0x58
 8000f98:	f000 80c0 	beq.w	800111c <_printf_i+0x1a8>
 8000f9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000fa0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8000fa4:	e03a      	b.n	800101c <_printf_i+0xa8>
 8000fa6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8000faa:	2b15      	cmp	r3, #21
 8000fac:	d8f6      	bhi.n	8000f9c <_printf_i+0x28>
 8000fae:	a101      	add	r1, pc, #4	; (adr r1, 8000fb4 <_printf_i+0x40>)
 8000fb0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000fb4:	0800100d 	.word	0x0800100d
 8000fb8:	08001021 	.word	0x08001021
 8000fbc:	08000f9d 	.word	0x08000f9d
 8000fc0:	08000f9d 	.word	0x08000f9d
 8000fc4:	08000f9d 	.word	0x08000f9d
 8000fc8:	08000f9d 	.word	0x08000f9d
 8000fcc:	08001021 	.word	0x08001021
 8000fd0:	08000f9d 	.word	0x08000f9d
 8000fd4:	08000f9d 	.word	0x08000f9d
 8000fd8:	08000f9d 	.word	0x08000f9d
 8000fdc:	08000f9d 	.word	0x08000f9d
 8000fe0:	08001125 	.word	0x08001125
 8000fe4:	0800104d 	.word	0x0800104d
 8000fe8:	080010df 	.word	0x080010df
 8000fec:	08000f9d 	.word	0x08000f9d
 8000ff0:	08000f9d 	.word	0x08000f9d
 8000ff4:	08001147 	.word	0x08001147
 8000ff8:	08000f9d 	.word	0x08000f9d
 8000ffc:	0800104d 	.word	0x0800104d
 8001000:	08000f9d 	.word	0x08000f9d
 8001004:	08000f9d 	.word	0x08000f9d
 8001008:	080010e7 	.word	0x080010e7
 800100c:	682b      	ldr	r3, [r5, #0]
 800100e:	1d1a      	adds	r2, r3, #4
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	602a      	str	r2, [r5, #0]
 8001014:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001018:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800101c:	2301      	movs	r3, #1
 800101e:	e09f      	b.n	8001160 <_printf_i+0x1ec>
 8001020:	6820      	ldr	r0, [r4, #0]
 8001022:	682b      	ldr	r3, [r5, #0]
 8001024:	0607      	lsls	r7, r0, #24
 8001026:	f103 0104 	add.w	r1, r3, #4
 800102a:	6029      	str	r1, [r5, #0]
 800102c:	d501      	bpl.n	8001032 <_printf_i+0xbe>
 800102e:	681e      	ldr	r6, [r3, #0]
 8001030:	e003      	b.n	800103a <_printf_i+0xc6>
 8001032:	0646      	lsls	r6, r0, #25
 8001034:	d5fb      	bpl.n	800102e <_printf_i+0xba>
 8001036:	f9b3 6000 	ldrsh.w	r6, [r3]
 800103a:	2e00      	cmp	r6, #0
 800103c:	da03      	bge.n	8001046 <_printf_i+0xd2>
 800103e:	232d      	movs	r3, #45	; 0x2d
 8001040:	4276      	negs	r6, r6
 8001042:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001046:	485a      	ldr	r0, [pc, #360]	; (80011b0 <_printf_i+0x23c>)
 8001048:	230a      	movs	r3, #10
 800104a:	e012      	b.n	8001072 <_printf_i+0xfe>
 800104c:	682b      	ldr	r3, [r5, #0]
 800104e:	6820      	ldr	r0, [r4, #0]
 8001050:	1d19      	adds	r1, r3, #4
 8001052:	6029      	str	r1, [r5, #0]
 8001054:	0605      	lsls	r5, r0, #24
 8001056:	d501      	bpl.n	800105c <_printf_i+0xe8>
 8001058:	681e      	ldr	r6, [r3, #0]
 800105a:	e002      	b.n	8001062 <_printf_i+0xee>
 800105c:	0641      	lsls	r1, r0, #25
 800105e:	d5fb      	bpl.n	8001058 <_printf_i+0xe4>
 8001060:	881e      	ldrh	r6, [r3, #0]
 8001062:	4853      	ldr	r0, [pc, #332]	; (80011b0 <_printf_i+0x23c>)
 8001064:	2f6f      	cmp	r7, #111	; 0x6f
 8001066:	bf0c      	ite	eq
 8001068:	2308      	moveq	r3, #8
 800106a:	230a      	movne	r3, #10
 800106c:	2100      	movs	r1, #0
 800106e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001072:	6865      	ldr	r5, [r4, #4]
 8001074:	60a5      	str	r5, [r4, #8]
 8001076:	2d00      	cmp	r5, #0
 8001078:	bfa2      	ittt	ge
 800107a:	6821      	ldrge	r1, [r4, #0]
 800107c:	f021 0104 	bicge.w	r1, r1, #4
 8001080:	6021      	strge	r1, [r4, #0]
 8001082:	b90e      	cbnz	r6, 8001088 <_printf_i+0x114>
 8001084:	2d00      	cmp	r5, #0
 8001086:	d04b      	beq.n	8001120 <_printf_i+0x1ac>
 8001088:	4615      	mov	r5, r2
 800108a:	fbb6 f1f3 	udiv	r1, r6, r3
 800108e:	fb03 6711 	mls	r7, r3, r1, r6
 8001092:	5dc7      	ldrb	r7, [r0, r7]
 8001094:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001098:	4637      	mov	r7, r6
 800109a:	42bb      	cmp	r3, r7
 800109c:	460e      	mov	r6, r1
 800109e:	d9f4      	bls.n	800108a <_printf_i+0x116>
 80010a0:	2b08      	cmp	r3, #8
 80010a2:	d10b      	bne.n	80010bc <_printf_i+0x148>
 80010a4:	6823      	ldr	r3, [r4, #0]
 80010a6:	07de      	lsls	r6, r3, #31
 80010a8:	d508      	bpl.n	80010bc <_printf_i+0x148>
 80010aa:	6923      	ldr	r3, [r4, #16]
 80010ac:	6861      	ldr	r1, [r4, #4]
 80010ae:	4299      	cmp	r1, r3
 80010b0:	bfde      	ittt	le
 80010b2:	2330      	movle	r3, #48	; 0x30
 80010b4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80010b8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80010bc:	1b52      	subs	r2, r2, r5
 80010be:	6122      	str	r2, [r4, #16]
 80010c0:	f8cd a000 	str.w	sl, [sp]
 80010c4:	464b      	mov	r3, r9
 80010c6:	aa03      	add	r2, sp, #12
 80010c8:	4621      	mov	r1, r4
 80010ca:	4640      	mov	r0, r8
 80010cc:	f7ff fee4 	bl	8000e98 <_printf_common>
 80010d0:	3001      	adds	r0, #1
 80010d2:	d14a      	bne.n	800116a <_printf_i+0x1f6>
 80010d4:	f04f 30ff 	mov.w	r0, #4294967295
 80010d8:	b004      	add	sp, #16
 80010da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010de:	6823      	ldr	r3, [r4, #0]
 80010e0:	f043 0320 	orr.w	r3, r3, #32
 80010e4:	6023      	str	r3, [r4, #0]
 80010e6:	4833      	ldr	r0, [pc, #204]	; (80011b4 <_printf_i+0x240>)
 80010e8:	2778      	movs	r7, #120	; 0x78
 80010ea:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80010ee:	6823      	ldr	r3, [r4, #0]
 80010f0:	6829      	ldr	r1, [r5, #0]
 80010f2:	061f      	lsls	r7, r3, #24
 80010f4:	f851 6b04 	ldr.w	r6, [r1], #4
 80010f8:	d402      	bmi.n	8001100 <_printf_i+0x18c>
 80010fa:	065f      	lsls	r7, r3, #25
 80010fc:	bf48      	it	mi
 80010fe:	b2b6      	uxthmi	r6, r6
 8001100:	07df      	lsls	r7, r3, #31
 8001102:	bf48      	it	mi
 8001104:	f043 0320 	orrmi.w	r3, r3, #32
 8001108:	6029      	str	r1, [r5, #0]
 800110a:	bf48      	it	mi
 800110c:	6023      	strmi	r3, [r4, #0]
 800110e:	b91e      	cbnz	r6, 8001118 <_printf_i+0x1a4>
 8001110:	6823      	ldr	r3, [r4, #0]
 8001112:	f023 0320 	bic.w	r3, r3, #32
 8001116:	6023      	str	r3, [r4, #0]
 8001118:	2310      	movs	r3, #16
 800111a:	e7a7      	b.n	800106c <_printf_i+0xf8>
 800111c:	4824      	ldr	r0, [pc, #144]	; (80011b0 <_printf_i+0x23c>)
 800111e:	e7e4      	b.n	80010ea <_printf_i+0x176>
 8001120:	4615      	mov	r5, r2
 8001122:	e7bd      	b.n	80010a0 <_printf_i+0x12c>
 8001124:	682b      	ldr	r3, [r5, #0]
 8001126:	6826      	ldr	r6, [r4, #0]
 8001128:	6961      	ldr	r1, [r4, #20]
 800112a:	1d18      	adds	r0, r3, #4
 800112c:	6028      	str	r0, [r5, #0]
 800112e:	0635      	lsls	r5, r6, #24
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	d501      	bpl.n	8001138 <_printf_i+0x1c4>
 8001134:	6019      	str	r1, [r3, #0]
 8001136:	e002      	b.n	800113e <_printf_i+0x1ca>
 8001138:	0670      	lsls	r0, r6, #25
 800113a:	d5fb      	bpl.n	8001134 <_printf_i+0x1c0>
 800113c:	8019      	strh	r1, [r3, #0]
 800113e:	2300      	movs	r3, #0
 8001140:	6123      	str	r3, [r4, #16]
 8001142:	4615      	mov	r5, r2
 8001144:	e7bc      	b.n	80010c0 <_printf_i+0x14c>
 8001146:	682b      	ldr	r3, [r5, #0]
 8001148:	1d1a      	adds	r2, r3, #4
 800114a:	602a      	str	r2, [r5, #0]
 800114c:	681d      	ldr	r5, [r3, #0]
 800114e:	6862      	ldr	r2, [r4, #4]
 8001150:	2100      	movs	r1, #0
 8001152:	4628      	mov	r0, r5
 8001154:	f7ff f84c 	bl	80001f0 <memchr>
 8001158:	b108      	cbz	r0, 800115e <_printf_i+0x1ea>
 800115a:	1b40      	subs	r0, r0, r5
 800115c:	6060      	str	r0, [r4, #4]
 800115e:	6863      	ldr	r3, [r4, #4]
 8001160:	6123      	str	r3, [r4, #16]
 8001162:	2300      	movs	r3, #0
 8001164:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001168:	e7aa      	b.n	80010c0 <_printf_i+0x14c>
 800116a:	6923      	ldr	r3, [r4, #16]
 800116c:	462a      	mov	r2, r5
 800116e:	4649      	mov	r1, r9
 8001170:	4640      	mov	r0, r8
 8001172:	47d0      	blx	sl
 8001174:	3001      	adds	r0, #1
 8001176:	d0ad      	beq.n	80010d4 <_printf_i+0x160>
 8001178:	6823      	ldr	r3, [r4, #0]
 800117a:	079b      	lsls	r3, r3, #30
 800117c:	d413      	bmi.n	80011a6 <_printf_i+0x232>
 800117e:	68e0      	ldr	r0, [r4, #12]
 8001180:	9b03      	ldr	r3, [sp, #12]
 8001182:	4298      	cmp	r0, r3
 8001184:	bfb8      	it	lt
 8001186:	4618      	movlt	r0, r3
 8001188:	e7a6      	b.n	80010d8 <_printf_i+0x164>
 800118a:	2301      	movs	r3, #1
 800118c:	4632      	mov	r2, r6
 800118e:	4649      	mov	r1, r9
 8001190:	4640      	mov	r0, r8
 8001192:	47d0      	blx	sl
 8001194:	3001      	adds	r0, #1
 8001196:	d09d      	beq.n	80010d4 <_printf_i+0x160>
 8001198:	3501      	adds	r5, #1
 800119a:	68e3      	ldr	r3, [r4, #12]
 800119c:	9903      	ldr	r1, [sp, #12]
 800119e:	1a5b      	subs	r3, r3, r1
 80011a0:	42ab      	cmp	r3, r5
 80011a2:	dcf2      	bgt.n	800118a <_printf_i+0x216>
 80011a4:	e7eb      	b.n	800117e <_printf_i+0x20a>
 80011a6:	2500      	movs	r5, #0
 80011a8:	f104 0619 	add.w	r6, r4, #25
 80011ac:	e7f5      	b.n	800119a <_printf_i+0x226>
 80011ae:	bf00      	nop
 80011b0:	080015d1 	.word	0x080015d1
 80011b4:	080015e2 	.word	0x080015e2

080011b8 <__sflush_r>:
 80011b8:	898a      	ldrh	r2, [r1, #12]
 80011ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80011be:	4605      	mov	r5, r0
 80011c0:	0710      	lsls	r0, r2, #28
 80011c2:	460c      	mov	r4, r1
 80011c4:	d458      	bmi.n	8001278 <__sflush_r+0xc0>
 80011c6:	684b      	ldr	r3, [r1, #4]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	dc05      	bgt.n	80011d8 <__sflush_r+0x20>
 80011cc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	dc02      	bgt.n	80011d8 <__sflush_r+0x20>
 80011d2:	2000      	movs	r0, #0
 80011d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80011d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80011da:	2e00      	cmp	r6, #0
 80011dc:	d0f9      	beq.n	80011d2 <__sflush_r+0x1a>
 80011de:	2300      	movs	r3, #0
 80011e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80011e4:	682f      	ldr	r7, [r5, #0]
 80011e6:	6a21      	ldr	r1, [r4, #32]
 80011e8:	602b      	str	r3, [r5, #0]
 80011ea:	d032      	beq.n	8001252 <__sflush_r+0x9a>
 80011ec:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80011ee:	89a3      	ldrh	r3, [r4, #12]
 80011f0:	075a      	lsls	r2, r3, #29
 80011f2:	d505      	bpl.n	8001200 <__sflush_r+0x48>
 80011f4:	6863      	ldr	r3, [r4, #4]
 80011f6:	1ac0      	subs	r0, r0, r3
 80011f8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80011fa:	b10b      	cbz	r3, 8001200 <__sflush_r+0x48>
 80011fc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80011fe:	1ac0      	subs	r0, r0, r3
 8001200:	2300      	movs	r3, #0
 8001202:	4602      	mov	r2, r0
 8001204:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001206:	6a21      	ldr	r1, [r4, #32]
 8001208:	4628      	mov	r0, r5
 800120a:	47b0      	blx	r6
 800120c:	1c43      	adds	r3, r0, #1
 800120e:	89a3      	ldrh	r3, [r4, #12]
 8001210:	d106      	bne.n	8001220 <__sflush_r+0x68>
 8001212:	6829      	ldr	r1, [r5, #0]
 8001214:	291d      	cmp	r1, #29
 8001216:	d82b      	bhi.n	8001270 <__sflush_r+0xb8>
 8001218:	4a29      	ldr	r2, [pc, #164]	; (80012c0 <__sflush_r+0x108>)
 800121a:	410a      	asrs	r2, r1
 800121c:	07d6      	lsls	r6, r2, #31
 800121e:	d427      	bmi.n	8001270 <__sflush_r+0xb8>
 8001220:	2200      	movs	r2, #0
 8001222:	6062      	str	r2, [r4, #4]
 8001224:	04d9      	lsls	r1, r3, #19
 8001226:	6922      	ldr	r2, [r4, #16]
 8001228:	6022      	str	r2, [r4, #0]
 800122a:	d504      	bpl.n	8001236 <__sflush_r+0x7e>
 800122c:	1c42      	adds	r2, r0, #1
 800122e:	d101      	bne.n	8001234 <__sflush_r+0x7c>
 8001230:	682b      	ldr	r3, [r5, #0]
 8001232:	b903      	cbnz	r3, 8001236 <__sflush_r+0x7e>
 8001234:	6560      	str	r0, [r4, #84]	; 0x54
 8001236:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001238:	602f      	str	r7, [r5, #0]
 800123a:	2900      	cmp	r1, #0
 800123c:	d0c9      	beq.n	80011d2 <__sflush_r+0x1a>
 800123e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001242:	4299      	cmp	r1, r3
 8001244:	d002      	beq.n	800124c <__sflush_r+0x94>
 8001246:	4628      	mov	r0, r5
 8001248:	f7ff fbea 	bl	8000a20 <_free_r>
 800124c:	2000      	movs	r0, #0
 800124e:	6360      	str	r0, [r4, #52]	; 0x34
 8001250:	e7c0      	b.n	80011d4 <__sflush_r+0x1c>
 8001252:	2301      	movs	r3, #1
 8001254:	4628      	mov	r0, r5
 8001256:	47b0      	blx	r6
 8001258:	1c41      	adds	r1, r0, #1
 800125a:	d1c8      	bne.n	80011ee <__sflush_r+0x36>
 800125c:	682b      	ldr	r3, [r5, #0]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d0c5      	beq.n	80011ee <__sflush_r+0x36>
 8001262:	2b1d      	cmp	r3, #29
 8001264:	d001      	beq.n	800126a <__sflush_r+0xb2>
 8001266:	2b16      	cmp	r3, #22
 8001268:	d101      	bne.n	800126e <__sflush_r+0xb6>
 800126a:	602f      	str	r7, [r5, #0]
 800126c:	e7b1      	b.n	80011d2 <__sflush_r+0x1a>
 800126e:	89a3      	ldrh	r3, [r4, #12]
 8001270:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001274:	81a3      	strh	r3, [r4, #12]
 8001276:	e7ad      	b.n	80011d4 <__sflush_r+0x1c>
 8001278:	690f      	ldr	r7, [r1, #16]
 800127a:	2f00      	cmp	r7, #0
 800127c:	d0a9      	beq.n	80011d2 <__sflush_r+0x1a>
 800127e:	0793      	lsls	r3, r2, #30
 8001280:	680e      	ldr	r6, [r1, #0]
 8001282:	bf08      	it	eq
 8001284:	694b      	ldreq	r3, [r1, #20]
 8001286:	600f      	str	r7, [r1, #0]
 8001288:	bf18      	it	ne
 800128a:	2300      	movne	r3, #0
 800128c:	eba6 0807 	sub.w	r8, r6, r7
 8001290:	608b      	str	r3, [r1, #8]
 8001292:	f1b8 0f00 	cmp.w	r8, #0
 8001296:	dd9c      	ble.n	80011d2 <__sflush_r+0x1a>
 8001298:	6a21      	ldr	r1, [r4, #32]
 800129a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800129c:	4643      	mov	r3, r8
 800129e:	463a      	mov	r2, r7
 80012a0:	4628      	mov	r0, r5
 80012a2:	47b0      	blx	r6
 80012a4:	2800      	cmp	r0, #0
 80012a6:	dc06      	bgt.n	80012b6 <__sflush_r+0xfe>
 80012a8:	89a3      	ldrh	r3, [r4, #12]
 80012aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012ae:	81a3      	strh	r3, [r4, #12]
 80012b0:	f04f 30ff 	mov.w	r0, #4294967295
 80012b4:	e78e      	b.n	80011d4 <__sflush_r+0x1c>
 80012b6:	4407      	add	r7, r0
 80012b8:	eba8 0800 	sub.w	r8, r8, r0
 80012bc:	e7e9      	b.n	8001292 <__sflush_r+0xda>
 80012be:	bf00      	nop
 80012c0:	dfbffffe 	.word	0xdfbffffe

080012c4 <_fflush_r>:
 80012c4:	b538      	push	{r3, r4, r5, lr}
 80012c6:	690b      	ldr	r3, [r1, #16]
 80012c8:	4605      	mov	r5, r0
 80012ca:	460c      	mov	r4, r1
 80012cc:	b913      	cbnz	r3, 80012d4 <_fflush_r+0x10>
 80012ce:	2500      	movs	r5, #0
 80012d0:	4628      	mov	r0, r5
 80012d2:	bd38      	pop	{r3, r4, r5, pc}
 80012d4:	b118      	cbz	r0, 80012de <_fflush_r+0x1a>
 80012d6:	6a03      	ldr	r3, [r0, #32]
 80012d8:	b90b      	cbnz	r3, 80012de <_fflush_r+0x1a>
 80012da:	f7ff fa9b 	bl	8000814 <__sinit>
 80012de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d0f3      	beq.n	80012ce <_fflush_r+0xa>
 80012e6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80012e8:	07d0      	lsls	r0, r2, #31
 80012ea:	d404      	bmi.n	80012f6 <_fflush_r+0x32>
 80012ec:	0599      	lsls	r1, r3, #22
 80012ee:	d402      	bmi.n	80012f6 <_fflush_r+0x32>
 80012f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80012f2:	f7ff fb93 	bl	8000a1c <__retarget_lock_acquire_recursive>
 80012f6:	4628      	mov	r0, r5
 80012f8:	4621      	mov	r1, r4
 80012fa:	f7ff ff5d 	bl	80011b8 <__sflush_r>
 80012fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001300:	07da      	lsls	r2, r3, #31
 8001302:	4605      	mov	r5, r0
 8001304:	d4e4      	bmi.n	80012d0 <_fflush_r+0xc>
 8001306:	89a3      	ldrh	r3, [r4, #12]
 8001308:	059b      	lsls	r3, r3, #22
 800130a:	d4e1      	bmi.n	80012d0 <_fflush_r+0xc>
 800130c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800130e:	f7ff fb86 	bl	8000a1e <__retarget_lock_release_recursive>
 8001312:	e7dd      	b.n	80012d0 <_fflush_r+0xc>

08001314 <__swbuf_r>:
 8001314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001316:	460e      	mov	r6, r1
 8001318:	4614      	mov	r4, r2
 800131a:	4605      	mov	r5, r0
 800131c:	b118      	cbz	r0, 8001326 <__swbuf_r+0x12>
 800131e:	6a03      	ldr	r3, [r0, #32]
 8001320:	b90b      	cbnz	r3, 8001326 <__swbuf_r+0x12>
 8001322:	f7ff fa77 	bl	8000814 <__sinit>
 8001326:	69a3      	ldr	r3, [r4, #24]
 8001328:	60a3      	str	r3, [r4, #8]
 800132a:	89a3      	ldrh	r3, [r4, #12]
 800132c:	071a      	lsls	r2, r3, #28
 800132e:	d525      	bpl.n	800137c <__swbuf_r+0x68>
 8001330:	6923      	ldr	r3, [r4, #16]
 8001332:	b31b      	cbz	r3, 800137c <__swbuf_r+0x68>
 8001334:	6823      	ldr	r3, [r4, #0]
 8001336:	6922      	ldr	r2, [r4, #16]
 8001338:	1a98      	subs	r0, r3, r2
 800133a:	6963      	ldr	r3, [r4, #20]
 800133c:	b2f6      	uxtb	r6, r6
 800133e:	4283      	cmp	r3, r0
 8001340:	4637      	mov	r7, r6
 8001342:	dc04      	bgt.n	800134e <__swbuf_r+0x3a>
 8001344:	4621      	mov	r1, r4
 8001346:	4628      	mov	r0, r5
 8001348:	f7ff ffbc 	bl	80012c4 <_fflush_r>
 800134c:	b9e0      	cbnz	r0, 8001388 <__swbuf_r+0x74>
 800134e:	68a3      	ldr	r3, [r4, #8]
 8001350:	3b01      	subs	r3, #1
 8001352:	60a3      	str	r3, [r4, #8]
 8001354:	6823      	ldr	r3, [r4, #0]
 8001356:	1c5a      	adds	r2, r3, #1
 8001358:	6022      	str	r2, [r4, #0]
 800135a:	701e      	strb	r6, [r3, #0]
 800135c:	6962      	ldr	r2, [r4, #20]
 800135e:	1c43      	adds	r3, r0, #1
 8001360:	429a      	cmp	r2, r3
 8001362:	d004      	beq.n	800136e <__swbuf_r+0x5a>
 8001364:	89a3      	ldrh	r3, [r4, #12]
 8001366:	07db      	lsls	r3, r3, #31
 8001368:	d506      	bpl.n	8001378 <__swbuf_r+0x64>
 800136a:	2e0a      	cmp	r6, #10
 800136c:	d104      	bne.n	8001378 <__swbuf_r+0x64>
 800136e:	4621      	mov	r1, r4
 8001370:	4628      	mov	r0, r5
 8001372:	f7ff ffa7 	bl	80012c4 <_fflush_r>
 8001376:	b938      	cbnz	r0, 8001388 <__swbuf_r+0x74>
 8001378:	4638      	mov	r0, r7
 800137a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800137c:	4621      	mov	r1, r4
 800137e:	4628      	mov	r0, r5
 8001380:	f000 f806 	bl	8001390 <__swsetup_r>
 8001384:	2800      	cmp	r0, #0
 8001386:	d0d5      	beq.n	8001334 <__swbuf_r+0x20>
 8001388:	f04f 37ff 	mov.w	r7, #4294967295
 800138c:	e7f4      	b.n	8001378 <__swbuf_r+0x64>
	...

08001390 <__swsetup_r>:
 8001390:	b538      	push	{r3, r4, r5, lr}
 8001392:	4b2a      	ldr	r3, [pc, #168]	; (800143c <__swsetup_r+0xac>)
 8001394:	4605      	mov	r5, r0
 8001396:	6818      	ldr	r0, [r3, #0]
 8001398:	460c      	mov	r4, r1
 800139a:	b118      	cbz	r0, 80013a4 <__swsetup_r+0x14>
 800139c:	6a03      	ldr	r3, [r0, #32]
 800139e:	b90b      	cbnz	r3, 80013a4 <__swsetup_r+0x14>
 80013a0:	f7ff fa38 	bl	8000814 <__sinit>
 80013a4:	89a3      	ldrh	r3, [r4, #12]
 80013a6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80013aa:	0718      	lsls	r0, r3, #28
 80013ac:	d422      	bmi.n	80013f4 <__swsetup_r+0x64>
 80013ae:	06d9      	lsls	r1, r3, #27
 80013b0:	d407      	bmi.n	80013c2 <__swsetup_r+0x32>
 80013b2:	2309      	movs	r3, #9
 80013b4:	602b      	str	r3, [r5, #0]
 80013b6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80013ba:	81a3      	strh	r3, [r4, #12]
 80013bc:	f04f 30ff 	mov.w	r0, #4294967295
 80013c0:	e034      	b.n	800142c <__swsetup_r+0x9c>
 80013c2:	0758      	lsls	r0, r3, #29
 80013c4:	d512      	bpl.n	80013ec <__swsetup_r+0x5c>
 80013c6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80013c8:	b141      	cbz	r1, 80013dc <__swsetup_r+0x4c>
 80013ca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80013ce:	4299      	cmp	r1, r3
 80013d0:	d002      	beq.n	80013d8 <__swsetup_r+0x48>
 80013d2:	4628      	mov	r0, r5
 80013d4:	f7ff fb24 	bl	8000a20 <_free_r>
 80013d8:	2300      	movs	r3, #0
 80013da:	6363      	str	r3, [r4, #52]	; 0x34
 80013dc:	89a3      	ldrh	r3, [r4, #12]
 80013de:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80013e2:	81a3      	strh	r3, [r4, #12]
 80013e4:	2300      	movs	r3, #0
 80013e6:	6063      	str	r3, [r4, #4]
 80013e8:	6923      	ldr	r3, [r4, #16]
 80013ea:	6023      	str	r3, [r4, #0]
 80013ec:	89a3      	ldrh	r3, [r4, #12]
 80013ee:	f043 0308 	orr.w	r3, r3, #8
 80013f2:	81a3      	strh	r3, [r4, #12]
 80013f4:	6923      	ldr	r3, [r4, #16]
 80013f6:	b94b      	cbnz	r3, 800140c <__swsetup_r+0x7c>
 80013f8:	89a3      	ldrh	r3, [r4, #12]
 80013fa:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80013fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001402:	d003      	beq.n	800140c <__swsetup_r+0x7c>
 8001404:	4621      	mov	r1, r4
 8001406:	4628      	mov	r0, r5
 8001408:	f000 f850 	bl	80014ac <__smakebuf_r>
 800140c:	89a0      	ldrh	r0, [r4, #12]
 800140e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001412:	f010 0301 	ands.w	r3, r0, #1
 8001416:	d00a      	beq.n	800142e <__swsetup_r+0x9e>
 8001418:	2300      	movs	r3, #0
 800141a:	60a3      	str	r3, [r4, #8]
 800141c:	6963      	ldr	r3, [r4, #20]
 800141e:	425b      	negs	r3, r3
 8001420:	61a3      	str	r3, [r4, #24]
 8001422:	6923      	ldr	r3, [r4, #16]
 8001424:	b943      	cbnz	r3, 8001438 <__swsetup_r+0xa8>
 8001426:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800142a:	d1c4      	bne.n	80013b6 <__swsetup_r+0x26>
 800142c:	bd38      	pop	{r3, r4, r5, pc}
 800142e:	0781      	lsls	r1, r0, #30
 8001430:	bf58      	it	pl
 8001432:	6963      	ldrpl	r3, [r4, #20]
 8001434:	60a3      	str	r3, [r4, #8]
 8001436:	e7f4      	b.n	8001422 <__swsetup_r+0x92>
 8001438:	2000      	movs	r0, #0
 800143a:	e7f7      	b.n	800142c <__swsetup_r+0x9c>
 800143c:	20000058 	.word	0x20000058

08001440 <_sbrk_r>:
 8001440:	b538      	push	{r3, r4, r5, lr}
 8001442:	4d06      	ldr	r5, [pc, #24]	; (800145c <_sbrk_r+0x1c>)
 8001444:	2300      	movs	r3, #0
 8001446:	4604      	mov	r4, r0
 8001448:	4608      	mov	r0, r1
 800144a:	602b      	str	r3, [r5, #0]
 800144c:	f7ff f908 	bl	8000660 <_sbrk>
 8001450:	1c43      	adds	r3, r0, #1
 8001452:	d102      	bne.n	800145a <_sbrk_r+0x1a>
 8001454:	682b      	ldr	r3, [r5, #0]
 8001456:	b103      	cbz	r3, 800145a <_sbrk_r+0x1a>
 8001458:	6023      	str	r3, [r4, #0]
 800145a:	bd38      	pop	{r3, r4, r5, pc}
 800145c:	200001b8 	.word	0x200001b8

08001460 <__swhatbuf_r>:
 8001460:	b570      	push	{r4, r5, r6, lr}
 8001462:	460c      	mov	r4, r1
 8001464:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001468:	2900      	cmp	r1, #0
 800146a:	b096      	sub	sp, #88	; 0x58
 800146c:	4615      	mov	r5, r2
 800146e:	461e      	mov	r6, r3
 8001470:	da0d      	bge.n	800148e <__swhatbuf_r+0x2e>
 8001472:	89a3      	ldrh	r3, [r4, #12]
 8001474:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001478:	f04f 0100 	mov.w	r1, #0
 800147c:	bf0c      	ite	eq
 800147e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8001482:	2340      	movne	r3, #64	; 0x40
 8001484:	2000      	movs	r0, #0
 8001486:	6031      	str	r1, [r6, #0]
 8001488:	602b      	str	r3, [r5, #0]
 800148a:	b016      	add	sp, #88	; 0x58
 800148c:	bd70      	pop	{r4, r5, r6, pc}
 800148e:	466a      	mov	r2, sp
 8001490:	f000 f848 	bl	8001524 <_fstat_r>
 8001494:	2800      	cmp	r0, #0
 8001496:	dbec      	blt.n	8001472 <__swhatbuf_r+0x12>
 8001498:	9901      	ldr	r1, [sp, #4]
 800149a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800149e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80014a2:	4259      	negs	r1, r3
 80014a4:	4159      	adcs	r1, r3
 80014a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014aa:	e7eb      	b.n	8001484 <__swhatbuf_r+0x24>

080014ac <__smakebuf_r>:
 80014ac:	898b      	ldrh	r3, [r1, #12]
 80014ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80014b0:	079d      	lsls	r5, r3, #30
 80014b2:	4606      	mov	r6, r0
 80014b4:	460c      	mov	r4, r1
 80014b6:	d507      	bpl.n	80014c8 <__smakebuf_r+0x1c>
 80014b8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80014bc:	6023      	str	r3, [r4, #0]
 80014be:	6123      	str	r3, [r4, #16]
 80014c0:	2301      	movs	r3, #1
 80014c2:	6163      	str	r3, [r4, #20]
 80014c4:	b002      	add	sp, #8
 80014c6:	bd70      	pop	{r4, r5, r6, pc}
 80014c8:	ab01      	add	r3, sp, #4
 80014ca:	466a      	mov	r2, sp
 80014cc:	f7ff ffc8 	bl	8001460 <__swhatbuf_r>
 80014d0:	9900      	ldr	r1, [sp, #0]
 80014d2:	4605      	mov	r5, r0
 80014d4:	4630      	mov	r0, r6
 80014d6:	f7ff fb0f 	bl	8000af8 <_malloc_r>
 80014da:	b948      	cbnz	r0, 80014f0 <__smakebuf_r+0x44>
 80014dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80014e0:	059a      	lsls	r2, r3, #22
 80014e2:	d4ef      	bmi.n	80014c4 <__smakebuf_r+0x18>
 80014e4:	f023 0303 	bic.w	r3, r3, #3
 80014e8:	f043 0302 	orr.w	r3, r3, #2
 80014ec:	81a3      	strh	r3, [r4, #12]
 80014ee:	e7e3      	b.n	80014b8 <__smakebuf_r+0xc>
 80014f0:	89a3      	ldrh	r3, [r4, #12]
 80014f2:	6020      	str	r0, [r4, #0]
 80014f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014f8:	81a3      	strh	r3, [r4, #12]
 80014fa:	9b00      	ldr	r3, [sp, #0]
 80014fc:	6163      	str	r3, [r4, #20]
 80014fe:	9b01      	ldr	r3, [sp, #4]
 8001500:	6120      	str	r0, [r4, #16]
 8001502:	b15b      	cbz	r3, 800151c <__smakebuf_r+0x70>
 8001504:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001508:	4630      	mov	r0, r6
 800150a:	f000 f81d 	bl	8001548 <_isatty_r>
 800150e:	b128      	cbz	r0, 800151c <__smakebuf_r+0x70>
 8001510:	89a3      	ldrh	r3, [r4, #12]
 8001512:	f023 0303 	bic.w	r3, r3, #3
 8001516:	f043 0301 	orr.w	r3, r3, #1
 800151a:	81a3      	strh	r3, [r4, #12]
 800151c:	89a3      	ldrh	r3, [r4, #12]
 800151e:	431d      	orrs	r5, r3
 8001520:	81a5      	strh	r5, [r4, #12]
 8001522:	e7cf      	b.n	80014c4 <__smakebuf_r+0x18>

08001524 <_fstat_r>:
 8001524:	b538      	push	{r3, r4, r5, lr}
 8001526:	4d07      	ldr	r5, [pc, #28]	; (8001544 <_fstat_r+0x20>)
 8001528:	2300      	movs	r3, #0
 800152a:	4604      	mov	r4, r0
 800152c:	4608      	mov	r0, r1
 800152e:	4611      	mov	r1, r2
 8001530:	602b      	str	r3, [r5, #0]
 8001532:	f7ff f86c 	bl	800060e <_fstat>
 8001536:	1c43      	adds	r3, r0, #1
 8001538:	d102      	bne.n	8001540 <_fstat_r+0x1c>
 800153a:	682b      	ldr	r3, [r5, #0]
 800153c:	b103      	cbz	r3, 8001540 <_fstat_r+0x1c>
 800153e:	6023      	str	r3, [r4, #0]
 8001540:	bd38      	pop	{r3, r4, r5, pc}
 8001542:	bf00      	nop
 8001544:	200001b8 	.word	0x200001b8

08001548 <_isatty_r>:
 8001548:	b538      	push	{r3, r4, r5, lr}
 800154a:	4d06      	ldr	r5, [pc, #24]	; (8001564 <_isatty_r+0x1c>)
 800154c:	2300      	movs	r3, #0
 800154e:	4604      	mov	r4, r0
 8001550:	4608      	mov	r0, r1
 8001552:	602b      	str	r3, [r5, #0]
 8001554:	f7ff f86b 	bl	800062e <_isatty>
 8001558:	1c43      	adds	r3, r0, #1
 800155a:	d102      	bne.n	8001562 <_isatty_r+0x1a>
 800155c:	682b      	ldr	r3, [r5, #0]
 800155e:	b103      	cbz	r3, 8001562 <_isatty_r+0x1a>
 8001560:	6023      	str	r3, [r4, #0]
 8001562:	bd38      	pop	{r3, r4, r5, pc}
 8001564:	200001b8 	.word	0x200001b8

08001568 <_init>:
 8001568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800156a:	bf00      	nop
 800156c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800156e:	bc08      	pop	{r3}
 8001570:	469e      	mov	lr, r3
 8001572:	4770      	bx	lr

08001574 <_fini>:
 8001574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001576:	bf00      	nop
 8001578:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800157a:	bc08      	pop	{r3}
 800157c:	469e      	mov	lr, r3
 800157e:	4770      	bx	lr
